structure A = Absyn

open Symbol
%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | UMINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm 
  program of A.exp
| exp of A.exp 
| expseq of (A.exp * pos) list
| expseq_some of (A.exp * pos) list
| expcomma of A.exp list
| expcomma_some of A.exp list
| idassigns of (symbol * A.exp * pos) list
| idassigns_some of (symbol * A.exp * pos) list
| math of A.exp
| comp of A.exp
| bool of A.exp
| decs of A.dec list
| dec of A.dec
| tydeclist of {name: symbol, ty: A.ty, pos: pos} list
| ty of A.ty
| tyfields of A.field list
| tyfields_some of A.field list
| vardec of A.dec
| fundeclist of A.fundec list
| fundec of A.fundec
| funcall of A.exp
| lvalue of A.var
| control of A.exp
| reccreation of A.exp
| arrcreation of A.exp

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE DO
OF NIL

%nodefault
%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%right    OF
%nonassoc DO
%nonassoc THEN
%nonassoc ELSE
%nonassoc ASSIGN
%left     OR
%left     AND
%nonassoc EQ NEQ LT LE GT GE
%left     PLUS MINUS
%left     TIMES DIVIDE
%left     UMINUS

%%

(* This is a skeleton grammar file, meant to illustrate what kind of
 * declarations are necessary above the %% mark.  Students are expected
 *  to replace the two dummy productions below with an actual grammar. 
 *)

program	
: exp	(exp)

exp
: lvalue                (A.VarExp(lvalue))
| NIL                   (A.NilExp)
| INT                   (A.IntExp INT)
| STRING                (A.StringExp (STRING, STRINGleft))
| funcall               (funcall)
| math                  (math)
| comp                  (comp)
| bool                  (bool)
| reccreation           (reccreation)
| arrcreation           (arrcreation)
| control               (control)
| lvalue ASSIGN exp     (A.AssignExp {var=lvalue, exp=exp, pos=ASSIGNleft})
| LPAREN expseq RPAREN  (A.SeqExp expseq)

control
: IF exp THEN exp ELSE exp        (A.IfExp {test=exp1, then'=exp2, else'=SOME(exp3), pos=IFleft})
| IF exp THEN exp                 (A.IfExp {test=exp1, then'=exp2, else'=NONE,       pos=IFleft})
| WHILE exp DO exp                (A.WhileExp {test=exp1, body=exp2, pos=WHILEleft})
| FOR ID ASSIGN exp TO exp DO exp (A.ForExp {var=symbol ID, escape=ref false, lo=exp1, hi=exp2, body=exp3, pos=FORleft})
| BREAK                           (A.BreakExp BREAKleft)
| LET decs IN expseq END          (A.LetExp {decs=decs, body=A.SeqExp expseq, pos=LETleft})

expseq
:             ([])
| expseq_some (expseq_some)

expseq_some
: exp                       ((exp, expleft) :: nil)
| exp SEMICOLON expseq_some ((exp, expleft) :: expseq_some)

expcomma
:               ([])
| expcomma_some (expcomma_some)

expcomma_some
: exp                     (exp :: nil)
| exp COMMA expcomma_some (exp :: expcomma_some)

math
: exp PLUS exp           (A.OpExp {left=exp1,       oper=A.PlusOp,   right=exp2, pos=PLUSleft})
| exp MINUS exp          (A.OpExp {left=exp1,       oper=A.MinusOp,  right=exp2, pos=MINUSleft})
| exp TIMES exp          (A.OpExp {left=exp1,       oper=A.TimesOp,  right=exp2, pos=TIMESleft})
| exp DIVIDE exp         (A.OpExp {left=exp1,       oper=A.DivideOp, right=exp2, pos=DIVIDEleft})
| MINUS exp %prec UMINUS (A.OpExp {left=A.IntExp 0, oper=A.MinusOp,  right=exp,  pos=MINUSleft})

comp
: exp LT  exp (A.OpExp {left=exp1, oper=A.LtOp,  right=exp2, pos=LTleft})
| exp LE  exp (A.OpExp {left=exp1, oper=A.LeOp,  right=exp2, pos=LEleft})
| exp GT  exp (A.OpExp {left=exp1, oper=A.GtOp,  right=exp2, pos=GTleft})
| exp GE  exp (A.OpExp {left=exp1, oper=A.GeOp,  right=exp2, pos=GEleft})
| exp EQ  exp (A.OpExp {left=exp1, oper=A.EqOp,  right=exp2, pos=EQleft})
| exp NEQ exp (A.OpExp {left=exp1, oper=A.NeqOp, right=exp2, pos=NEQleft})

bool
: exp AND exp (A.IfExp {test=exp1, then'=exp2, else'=SOME(A.IntExp 0), pos=ANDleft})
| exp OR exp  (A.IfExp {test=exp1, then'=A.IntExp 1, else'=SOME(exp2), pos=ORleft})

ty
: ID                     (A.NameTy (symbol ID, IDleft))
| LBRACE tyfields RBRACE (A.RecordTy (tyfields))
| ARRAY OF ID            (A.ArrayTy (symbol ID, ARRAYleft))

tyfields
:               ([])
| tyfields_some (tyfields_some)

tyfields_some
: ID COLON ID                     ({name=symbol ID1, escape=ref false, typ=symbol ID2, pos=COLONleft} :: nil)
| ID COLON ID COMMA tyfields_some ({name=symbol ID1, escape=ref false, typ=symbol ID2, pos=COLONleft} :: tyfields_some)

decs
:          ([])
| dec decs (dec :: decs)

dec
: tydeclist  (A.TypeDec tydeclist)
| vardec     (vardec)
| fundeclist (A.FunctionDec fundeclist)

tydeclist
: TYPE ID EQ ty           ({name=symbol ID, ty=ty, pos=TYPEleft} :: nil)
| TYPE ID EQ ty tydeclist (({name=symbol ID, ty=ty, pos=TYPEleft}) :: tydeclist)

vardec
: VAR ID ASSIGN exp          (A.VarDec {name=symbol ID, escape=ref false, typ=NONE, init=exp, pos=VARleft})
| VAR ID COLON ID ASSIGN exp (A.VarDec {name=symbol ID1, 
                                        escape=ref false, 
                                        typ=SOME(symbol ID2, ID2left), 
                                        init=exp,
                                        pos=VARleft})


fundeclist
: fundec            (fundec :: nil)
| fundec fundeclist (fundec :: fundeclist)


fundec
: FUNCTION ID LPAREN tyfields RPAREN EQ exp          ({name=symbol ID, 
                                                      params=tyfields, 
                                                      result=NONE, 
                                                      body=exp, 
                                                      pos=FUNCTIONleft})
| FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp ({name=symbol ID1, 
                                                      params=tyfields, 
                                                      result=SOME(symbol ID2, ID2left), 
                                                      body=exp, 
                                                      pos=FUNCTIONleft})

reccreation
: ID LBRACE idassigns RBRACE (A.RecordExp {fields=idassigns, typ=symbol ID, pos=IDleft})

idassigns
:                ([])
| idassigns_some (idassigns_some)

idassigns_some
: ID EQ exp                      ((symbol ID, exp, IDleft) :: nil)
| ID EQ exp COMMA idassigns_some ((symbol ID, exp, IDleft) :: idassigns_some)

lvalue
: ID                       (A.SimpleVar(symbol ID, IDleft))
| ID LBRACK exp RBRACK     (A.SubscriptVar(A.SimpleVar(symbol ID, IDleft), exp, IDleft))
| lvalue LBRACK exp RBRACK (A.SubscriptVar(lvalue, exp, lvalueleft))
| lvalue DOT ID            (A.FieldVar(lvalue, symbol ID, lvalueleft))

arrcreation
: ID LBRACK exp RBRACK OF exp (A.ArrayExp {typ=symbol ID, size=exp1, init=exp2, pos=IDleft})

funcall
: ID LPAREN expcomma RPAREN (A.CallExp {func=symbol ID, args=expcomma, pos=IDleft})
