Standard ML of New Jersey v110.80 [built: Mon Sep 26 11:21:22 2016]
- [autoloading]
[library $smlnj/cm/cm.cm is stable]
[library $smlnj/internal/cm-sig-lib.cm is stable]
[library $/pgraph.cm is stable]
[library $smlnj/internal/srcpath-lib.cm is stable]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
[scanning sources.cm]
[attempting to load plugin $/lex-ext.cm]
[library $/lex-ext.cm is stable]
[library $smlnj/cm/tools.cm is stable]
[library $smlnj/internal/cm-lib.cm is stable]
[plugin $/lex-ext.cm loaded successfully]
[attempting to load plugin $/mllex-tool.cm]
[library $/mllex-tool.cm is stable]
[plugin $/mllex-tool.cm loaded successfully]
[attempting to load plugin $/grm-ext.cm]
[library $/grm-ext.cm is stable]
[plugin $/grm-ext.cm loaded successfully]
[attempting to load plugin $/mlyacc-tool.cm]
[library $/mlyacc-tool.cm is stable]
[plugin $/mlyacc-tool.cm loaded successfully]
[library $/ml-yacc-lib.cm is stable]
[library $SMLNJ-LIB/Util/smlnj-lib.cm is stable]
[library $SMLNJ-ML-YACC-LIB/ml-yacc-lib.cm is stable]
[loading (sources.cm):table.sig]
[loading (sources.cm):table.sml]
[loading (sources.cm):symbol.sml]
[loading (sources.cm):temp.sig]
[loading (sources.cm):temp.sml]
[loading (sources.cm):tree.sml]
[loading (sources.cm):errormsg.sml]
[loading (sources.cm):assem.sml]
[loading (sources.cm):frame.sig]
[loading (sources.cm):printtree.sml]
[loading (sources.cm):absyn.sml]
[loading (sources.cm):canon.sml]
[loading (sources.cm):translate.sig]
[loading (sources.cm):translate.sml]
[loading (sources.cm):prabsyn.sml]
[loading (sources.cm):mipsframe.sml]
[loading (sources.cm):codegen.sig]
[loading (sources.cm):mipsgen.sml]
[loading (sources.cm):tiger.grm.sig]
[loading (sources.cm):findescape.sml]
[loading (sources.cm):tiger.lex.sml]
[loading (sources.cm):funcgraph.sig]
[loading (sources.cm):types.sml]
[loading (sources.cm):tiger.grm.sml]
[loading (sources.cm):parsetest.sml]
[loading (sources.cm):funcgraph.sml]
[loading (sources.cm):flowgraph.sml]
[loading (sources.cm):liveness.sml]
[loading (sources.cm):env.sml]
[loading (sources.cm):semant.sml]
[loading (sources.cm):makegraph.sml]
[loading (sources.cm):main.sml]
Parsing file: ../tests/test1.tig
LetExp([
 TypeDec[
  (arrtype,
   ArrayTy(int))],
 VarDec(arr1,false,SOME(arrtype),
  ArrayExp(arrtype,
   IntExp(10),
   IntExp(0)))],
 SeqExp[
  VarExp(
   SimpleVar(arr1))])
Semanting Analysis: 
Generating IR Tree: 
New body:
LABEL L4
MOVE(
 TEMP t132,
 CALL(
  NAME initArray,
   CONST 11,
   CONST 0))
MOVE(
 MEM(
  TEMP t132),
 CONST 10)
MOVE(
 TEMP t133,
 TEMP t132)
EXP(
 TEMP t133)
JUMP(
 NAME L3)
LABEL L3
Going to step 2 :)
emit L0
L6:
addi    $a0, $r0, 11
addi    $a1, $r0, 0
jal     initArray
move    t132, $rv
addi    t134, $r0, 10
sw      t134, 0(t132)
move    t133, t132
j       L5
L5:
doing label L5
doing label L6
Printing Flow Graph
Node: L5:

 -> Successors:
 -> Predecessors:
   L6:
addi    $a0, $r0, 11
addi    $a1, $r0, 0
jal     initArray
move    t132, $rv
addi    t134, $r0, 10
sw      t134, 0(t132)
move    t133, t132
j       L5

Node: L6:
addi    $a0, $r0, 11
addi    $a1, $r0, 0
jal     initArray
move    t132, $rv
addi    t134, $r0, 10
sw      t134, 0(t132)
move    t133, t132
j       L5

 -> Successors:
   L5:

 -> Predecessors:
Frame L5
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L6
Defs: $rv, $ra, $a0, $a1, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t132, t133, t134, 
Uses: $r0, 
==================Printing Interference Graph==================
$rv => 
$ra => 
$a0 => 
$a1 => 
$s0 => 
$s1 => 
$s2 => 
$s3 => 
$s4 => 
$s5 => 
$s6 => 
$s7 => 
t132 => 
t133 => 
t134 => 
[New bindings added.]
val it = true : bool
====================Test1=====================
val it = () : unit
Parsing file: ../tests/test1.tig
LetExp([
 TypeDec[
  (arrtype,
   ArrayTy(int))],
 VarDec(arr1,false,SOME(arrtype),
  ArrayExp(arrtype,
   IntExp(10),
   IntExp(0)))],
 SeqExp[
  VarExp(
   SimpleVar(arr1))])
Semanting Analysis: 
Generating IR Tree: 
New body:
LABEL L9
MOVE(
 TEMP t135,
 CALL(
  NAME initArray,
   CONST 11,
   CONST 0))
MOVE(
 MEM(
  TEMP t135),
 CONST 10)
MOVE(
 TEMP t136,
 TEMP t135)
EXP(
 TEMP t136)
JUMP(
 NAME L8)
LABEL L8
Going to step 2 :)
emit L0
L11:
addi    $a0, $r0, 11
addi    $a1, $r0, 0
jal     initArray
move    t135, $rv
addi    t137, $r0, 10
sw      t137, 0(t135)
move    t136, t135
j       L10
L10:
doing label L10
doing label L11
Printing Flow Graph
Node: L10:

 -> Successors:
 -> Predecessors:
   L11:
addi    $a0, $r0, 11
addi    $a1, $r0, 0
jal     initArray
move    t135, $rv
addi    t137, $r0, 10
sw      t137, 0(t135)
move    t136, t135
j       L10

Node: L11:
addi    $a0, $r0, 11
addi    $a1, $r0, 0
jal     initArray
move    t135, $rv
addi    t137, $r0, 10
sw      t137, 0(t135)
move    t136, t135
j       L10

 -> Successors:
   L10:

 -> Predecessors:
Frame L10
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L11
Defs: $rv, $ra, $a0, $a1, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t135, t136, t137, 
Uses: $r0, 
==================Printing Interference Graph==================
$rv => 
$ra => 
$a0 => 
$a1 => 
$s0 => 
$s1 => 
$s2 => 
$s3 => 
$s4 => 
$s5 => 
$s6 => 
$s7 => 
t135 => 
t136 => 
t137 => 
val it = () : unit
====================Test2=====================
val it = () : unit
Parsing file: ../tests/test2.tig
LetExp([
 TypeDec[
  (myint,
   NameTy(int)),
  (arrtype,
   ArrayTy(myint))],
 VarDec(arr1,false,SOME(arrtype),
  ArrayExp(arrtype,
   IntExp(10),
   IntExp(0)))],
 SeqExp[
  VarExp(
   SimpleVar(arr1))])
Semanting Analysis: 
Generating IR Tree: 
New body:
LABEL L14
MOVE(
 TEMP t138,
 CALL(
  NAME initArray,
   CONST 11,
   CONST 0))
MOVE(
 MEM(
  TEMP t138),
 CONST 10)
MOVE(
 TEMP t139,
 TEMP t138)
EXP(
 TEMP t139)
JUMP(
 NAME L13)
LABEL L13
Going to step 2 :)
emit L0
L16:
addi    $a0, $r0, 11
addi    $a1, $r0, 0
jal     initArray
move    t138, $rv
addi    t140, $r0, 10
sw      t140, 0(t138)
move    t139, t138
j       L15
L15:
doing label L15
doing label L16
Printing Flow Graph
Node: L15:

 -> Successors:
 -> Predecessors:
   L16:
addi    $a0, $r0, 11
addi    $a1, $r0, 0
jal     initArray
move    t138, $rv
addi    t140, $r0, 10
sw      t140, 0(t138)
move    t139, t138
j       L15

Node: L16:
addi    $a0, $r0, 11
addi    $a1, $r0, 0
jal     initArray
move    t138, $rv
addi    t140, $r0, 10
sw      t140, 0(t138)
move    t139, t138
j       L15

 -> Successors:
   L15:

 -> Predecessors:
Frame L15
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L16
Defs: $rv, $ra, $a0, $a1, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t138, t139, t140, 
Uses: $r0, 
==================Printing Interference Graph==================
$rv => 
$ra => 
$a0 => 
$a1 => 
$s0 => 
$s1 => 
$s2 => 
$s3 => 
$s4 => 
$s5 => 
$s6 => 
$s7 => 
t138 => 
t139 => 
t140 => 
val it = () : unit
====================Test3=====================
val it = () : unit
Parsing file: ../tests/test3.tig
LetExp([
 TypeDec[
  (rectype,
   RecordTy[
    (name,false,string),
    (age,false,int)])],
 VarDec(rec1,false,SOME(rectype),
  RecordExp(rectype,[
   (name,
    StringExp("Nobody")),
   (age,
    IntExp(1000))]))],
 SeqExp[
  AssignExp(
   FieldVar(
    SimpleVar(rec1),
    name),
   StringExp("Somebody")),
  VarExp(
   SimpleVar(rec1))])
Semanting Analysis: 
Generating IR Tree: 
New body:
LABEL L23
MOVE(
 TEMP t141,
 CALL(
  NAME allocRecord,
   CONST 2))
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t141,
   CONST 0)),
 NAME L18)
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t141,
   CONST 4)),
 CONST 1000)
MOVE(
 TEMP t142,
 TEMP t141)
CJUMP(EQ,
 CONST 0,
 TEMP t142,
 L19,L20)
LABEL L20
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t142,
   BINOP(MUL,
    CONST 0,
    CONST 4))),
 NAME L21)
EXP(
 TEMP t142)
JUMP(
 NAME L22)
LABEL L19
Runtime Error: nil dereference check

JUMP(
 NAME L20)
LABEL L22
String:
L21: Somebody
String:
L18: Nobody
Going to step 2 :)
emit L0
L25:
addi    $a0, $r0, 2
jal     allocRecord
move    t141, $rv
la      t143, L18
sw      t143, 0(t141)
addi    t144, $r0, 1000
sw      t144, 4(t141)
move    t142, t141
addi    t146, $r0, 0
sub     t145, t146, t142
beqz    t145, L19
j       L20
L20:
la      t147, L21
addi    t150, $r0, 0
addi    t151, $r0, 4
mul     t149, t150, t151
add     t148, t142, t149
sw      t147, 0(t148)
j       L24
L19:
addi    $rv, $r0, 10
syscall
j       L20
L24:
doing label L19
doing label L20
doing label L24
doing label L25
Printing Flow Graph
Node: L19:
addi    $rv, $r0, 10
syscall
j       L20

 -> Successors:
   L20:
la      t147, L21
addi    t150, $r0, 0
addi    t151, $r0, 4
mul     t149, t150, t151
add     t148, t142, t149
sw      t147, 0(t148)
j       L24

 -> Predecessors:
   L25:
addi    $a0, $r0, 2
jal     allocRecord
move    t141, $rv
la      t143, L18
sw      t143, 0(t141)
addi    t144, $r0, 1000
sw      t144, 4(t141)
move    t142, t141
addi    t146, $r0, 0
sub     t145, t146, t142
beqz    t145, L19
j       L20

Node: L20:
la      t147, L21
addi    t150, $r0, 0
addi    t151, $r0, 4
mul     t149, t150, t151
add     t148, t142, t149
sw      t147, 0(t148)
j       L24

 -> Successors:
   L24:

 -> Predecessors:
   L19:
addi    $rv, $r0, 10
syscall
j       L20

   L25:
addi    $a0, $r0, 2
jal     allocRecord
move    t141, $rv
la      t143, L18
sw      t143, 0(t141)
addi    t144, $r0, 1000
sw      t144, 4(t141)
move    t142, t141
addi    t146, $r0, 0
sub     t145, t146, t142
beqz    t145, L19
j       L20

Node: L24:

 -> Successors:
 -> Predecessors:
   L20:
la      t147, L21
addi    t150, $r0, 0
addi    t151, $r0, 4
mul     t149, t150, t151
add     t148, t142, t149
sw      t147, 0(t148)
j       L24

Node: L25:
addi    $a0, $r0, 2
jal     allocRecord
move    t141, $rv
la      t143, L18
sw      t143, 0(t141)
addi    t144, $r0, 1000
sw      t144, 4(t141)
move    t142, t141
addi    t146, $r0, 0
sub     t145, t146, t142
beqz    t145, L19
j       L20

 -> Successors:
   L19:
addi    $rv, $r0, 10
syscall
j       L20

   L20:
la      t147, L21
addi    t150, $r0, 0
addi    t151, $r0, 4
mul     t149, t150, t151
add     t148, t142, t149
sw      t147, 0(t148)
j       L24

 -> Predecessors:
Frame L19
Defs: $rv, 
Uses: $r0, 
Frame L20
Defs: t147, t148, t149, t150, t151, 
Uses: $r0, t142, 
Frame L24
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L25
Defs: $rv, $ra, $a0, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t141, t142, t143, t144, t145, t146, 
Uses: $r0, 
==================Printing Interference Graph==================
$rv => 
$ra => 
$a0 => 
$s0 => 
$s1 => 
$s2 => 
$s3 => 
$s4 => 
$s5 => 
$s6 => 
$s7 => 
t141 => 
t142 => 
t143 => 
t144 => 
t145 => 
t146 => 
t147 => 
t148 => 
t149 => 
t150 => 
t151 => 
L21: Somebody
L18: Nobody
val it = () : unit
====================Test4=====================
val it = () : unit
Parsing file: ../tests/test4.tig
LetExp([
 FunctionDec[
  (nfactor,[
   (n,false,int)],
SOME(int),
   IfExp(
    OpExp(EqOp,
     VarExp(
      SimpleVar(n)),
     IntExp(0)),
    IntExp(1),
    OpExp(TimesOp,
     VarExp(
      SimpleVar(n)),
     CallExp(nfactor,[
      OpExp(MinusOp,
       VarExp(
        SimpleVar(n)),
       IntExp(1))]))))]],
 SeqExp[
  CallExp(nfactor,[
   IntExp(10)])])
Semanting Analysis: 
Generating IR Tree: 
New body:
LABEL L32
MOVE(
 TEMP t102,
 CALL(
  NAME L27,
   TEMP t108,
   CONST 10))
EXP(
 TEMP t102)
JUMP(
 NAME L31)
LABEL L31
New body:
LABEL L34
CJUMP(EQ,
 TEMP t153,
 CONST 0,
 L28,L29)
LABEL L29
MOVE(
 TEMP t155,
 TEMP t153)
MOVE(
 TEMP t102,
 CALL(
  NAME L27,
   MEM(
    BINOP(PLUS,
     CONST 0,
     TEMP t108)),
   BINOP(MINUS,
    TEMP t153,
    CONST 1)))
MOVE(
 TEMP t154,
 BINOP(MUL,
  TEMP t155,
  TEMP t102))
LABEL L30
EXP(
 TEMP t154)
JUMP(
 NAME L33)
LABEL L28
MOVE(
 TEMP t154,
 CONST 1)
JUMP(
 NAME L30)
LABEL L33
Going to step 2 :)
emit L0
L36:
move    $a0, $fp
addi    $a1, $r0, 10
jal     L27
move    $rv, $rv
j       L35
L35:
doing label L35
doing label L36
Printing Flow Graph
Node: L35:

 -> Successors:
 -> Predecessors:
   L36:
move    $a0, $fp
addi    $a1, $r0, 10
jal     L27
move    $rv, $rv
j       L35

Node: L36:
move    $a0, $fp
addi    $a1, $r0, 10
jal     L27
move    $rv, $rv
j       L35

 -> Successors:
   L35:

 -> Predecessors:
Frame L35
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L36
Defs: $rv, $ra, $a0, $a1, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Uses: $r0, $fp, 
==================Printing Interference Graph==================
$rv => 
$ra => 
$a0 => 
$a1 => 
$s0 => 
$s1 => 
$s2 => 
$s3 => 
$s4 => 
$s5 => 
$s6 => 
$s7 => 
emit L27
L38:
addi    t157, t153, 0
beqz    t157, L28
j       L29
L29:
move    t156, t153
lw      t158, 0($fp)
move    $a0, t158
addi    t159, t153, -1
move    $a1, t159
jal     L27
move    $rv, $rv
mul     t160, t156, $rv
move    t154, t160
L30:
j       L37
L28:
addi    t154, $r0, 1
j       L30
L37:
doing label L28
doing label L29
../tests/test4.tig0.0:Internal failure: Last instr not jump.
doing label L30
doing label L37
doing label L38
Printing Flow Graph
Node: L28:
addi    t154, $r0, 1
j       L30

 -> Successors:
 -> Predecessors:
   L38:
addi    t157, t153, 0
beqz    t157, L28
j       L29

Node: L29:
move    t156, t153
lw      t158, 0($fp)
move    $a0, t158
addi    t159, t153, -1
move    $a1, t159
jal     L27
move    $rv, $rv
mul     t160, t156, $rv
move    t154, t160

 -> Successors:
 -> Predecessors:
   L38:
addi    t157, t153, 0
beqz    t157, L28
j       L29

Node: L30:
j       L37

 -> Successors:
   L37:

 -> Predecessors:
Node: L37:

 -> Successors:
 -> Predecessors:
   L30:
j       L37

Node: L38:
addi    t157, t153, 0
beqz    t157, L28
j       L29

 -> Successors:
   L28:
addi    t154, $r0, 1
j       L30

   L29:
move    t156, t153
lw      t158, 0($fp)
move    $a0, t158
addi    t159, t153, -1
move    $a1, t159
jal     L27
move    $rv, $rv
mul     t160, t156, $rv
move    t154, t160

 -> Predecessors:
Frame L28
Defs: t154, 
Uses: $r0, 
Frame L29
Defs: $rv, $ra, $a0, $a1, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t154, t156, t158, t159, t160, 
Uses: $fp, t153, 
Frame L30
Defs: 
Uses: 
Frame L37
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L38
Defs: t157, 
Uses: t153, 
==================Printing Interference Graph==================
$rv => 
$ra => 
$a0 => 
$a1 => 
$s0 => 
$s1 => 
$s2 => 
$s3 => 
$s4 => 
$s5 => 
$s6 => 
$s7 => 
t154 => 
t156 => 
t157 => 
t158 => 
t159 => 
t160 => 
val it = () : unit
====================Test5=====================
val it = () : unit
Parsing file: ../tests/test5.tig
LetExp([
 TypeDec[
  (intlist,
   RecordTy[
    (hd,false,int),
    (tl,false,intlist)]),
  (tree,
   RecordTy[
    (key,false,int),
    (children,false,treelist)]),
  (treelist,
   RecordTy[
    (hd,false,tree),
    (tl,false,treelist)])],
 VarDec(lis,false,SOME(intlist),
  RecordExp(intlist,[
   (hd,
    IntExp(0)),
   (tl,
    NilExp)]))],
 SeqExp[
  VarExp(
   SimpleVar(lis))])
Semanting Analysis: 
Generating IR Tree: 
New body:
LABEL L41
MOVE(
 TEMP t161,
 CALL(
  NAME allocRecord,
   CONST 2))
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t161,
   CONST 0)),
 CONST 0)
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t161,
   CONST 4)),
 CONST 0)
MOVE(
 TEMP t162,
 TEMP t161)
EXP(
 TEMP t162)
JUMP(
 NAME L40)
LABEL L40
Going to step 2 :)
emit L0
L43:
addi    $a0, $r0, 2
jal     allocRecord
move    t161, $rv
addi    t163, $r0, 0
sw      t163, 0(t161)
addi    t164, $r0, 0
sw      t164, 4(t161)
move    t162, t161
j       L42
L42:
doing label L42
doing label L43
Printing Flow Graph
Node: L42:

 -> Successors:
 -> Predecessors:
   L43:
addi    $a0, $r0, 2
jal     allocRecord
move    t161, $rv
addi    t163, $r0, 0
sw      t163, 0(t161)
addi    t164, $r0, 0
sw      t164, 4(t161)
move    t162, t161
j       L42

Node: L43:
addi    $a0, $r0, 2
jal     allocRecord
move    t161, $rv
addi    t163, $r0, 0
sw      t163, 0(t161)
addi    t164, $r0, 0
sw      t164, 4(t161)
move    t162, t161
j       L42

 -> Successors:
   L42:

 -> Predecessors:
Frame L42
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L43
Defs: $rv, $ra, $a0, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t161, t162, t163, t164, 
Uses: $r0, 
==================Printing Interference Graph==================
$rv => 
$ra => 
$a0 => 
$s0 => 
$s1 => 
$s2 => 
$s3 => 
$s4 => 
$s5 => 
$s6 => 
$s7 => 
t161 => 
t162 => 
t163 => 
t164 => 
val it = () : unit
====================Test6=====================
val it = () : unit
Parsing file: ../tests/test6.tig
LetExp([
 FunctionDec[
  (do_nothing1,[
   (a,false,int),
   (b,false,string)],
NONE,
   CallExp(do_nothing2,[
    OpExp(PlusOp,
     VarExp(
      SimpleVar(a)),
     IntExp(1))])),
  (do_nothing2,[
   (d,false,int)],
NONE,
   CallExp(do_nothing1,[
    VarExp(
     SimpleVar(d)),
    StringExp("str")]))]],
 SeqExp[
  CallExp(do_nothing1,[
   IntExp(0),
   StringExp("str2")])])
Semanting Analysis: 
Generating IR Tree: 
New body:
LABEL L52
MOVE(
 TEMP t102,
 CALL(
  NAME L45,
   TEMP t108,
   CONST 0,
   NAME L50))
EXP(
 TEMP t102)
JUMP(
 NAME L51)
LABEL L51
String:
L50: str2
String:
L49: str2
New body:
LABEL L54
MOVE(
 TEMP t102,
 CALL(
  NAME L45,
   MEM(
    BINOP(PLUS,
     CONST 0,
     TEMP t108)),
   TEMP t170,
   NAME L48))
EXP(
 TEMP t102)
JUMP(
 NAME L53)
LABEL L53
String:
L48: str
String:
L47: str
New body:
LABEL L56
MOVE(
 TEMP t102,
 CALL(
  NAME L46,
   MEM(
    BINOP(PLUS,
     CONST 0,
     TEMP t108)),
   BINOP(PLUS,
    TEMP t168,
    CONST 1)))
EXP(
 TEMP t102)
JUMP(
 NAME L55)
LABEL L55
Going to step 2 :)
emit L0
L58:
move    $a0, $fp
addi    $a1, $r0, 0
la      t171, L50
move    $a2, t171
jal     L45
move    $rv, $rv
j       L57
L57:
doing label L57
doing label L58
Printing Flow Graph
Node: L57:

 -> Successors:
 -> Predecessors:
   L58:
move    $a0, $fp
addi    $a1, $r0, 0
la      t171, L50
move    $a2, t171
jal     L45
move    $rv, $rv
j       L57

Node: L58:
move    $a0, $fp
addi    $a1, $r0, 0
la      t171, L50
move    $a2, t171
jal     L45
move    $rv, $rv
j       L57

 -> Successors:
   L57:

 -> Predecessors:
Frame L57
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L58
Defs: $rv, $ra, $a0, $a1, $a2, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t171, 
Uses: $r0, $fp, 
==================Printing Interference Graph==================
$rv => 
$ra => 
$a0 => 
$a1 => 
$a2 => 
$s0 => 
$s1 => 
$s2 => 
$s3 => 
$s4 => 
$s5 => 
$s6 => 
$s7 => 
t171 => 
L50: str2
L49: str2
emit L46
L60:
lw      t172, 0($fp)
move    $a0, t172
move    $a1, t170
la      t173, L48
move    $a2, t173
jal     L45
move    $rv, $rv
j       L59
L59:
doing label L59
doing label L60
Printing Flow Graph
Node: L59:

 -> Successors:
 -> Predecessors:
   L60:
lw      t172, 0($fp)
move    $a0, t172
move    $a1, t170
la      t173, L48
move    $a2, t173
jal     L45
move    $rv, $rv
j       L59

Node: L60:
lw      t172, 0($fp)
move    $a0, t172
move    $a1, t170
la      t173, L48
move    $a2, t173
jal     L45
move    $rv, $rv
j       L59

 -> Successors:
   L59:

 -> Predecessors:
Frame L59
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L60
Defs: $rv, $ra, $a0, $a1, $a2, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t172, t173, 
Uses: $fp, t170, 
==================Printing Interference Graph==================
$rv => 
$ra => 
$a0 => 
$a1 => 
$a2 => 
$s0 => 
$s1 => 
$s2 => 
$s3 => 
$s4 => 
$s5 => 
$s6 => 
$s7 => 
t172 => 
t173 => 
L48: str
L47: str
emit L45
L62:
lw      t174, 0($fp)
move    $a0, t174
addi    t175, t168, 1
move    $a1, t175
jal     L46
move    $rv, $rv
j       L61
L61:
doing label L61
doing label L62
Printing Flow Graph
Node: L61:

 -> Successors:
 -> Predecessors:
   L62:
lw      t174, 0($fp)
move    $a0, t174
addi    t175, t168, 1
move    $a1, t175
jal     L46
move    $rv, $rv
j       L61

Node: L62:
lw      t174, 0($fp)
move    $a0, t174
addi    t175, t168, 1
move    $a1, t175
jal     L46
move    $rv, $rv
j       L61

 -> Successors:
   L61:

 -> Predecessors:
Frame L61
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L62
Defs: $rv, $ra, $a0, $a1, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t174, t175, 
Uses: $fp, t168, 
==================Printing Interference Graph==================
$rv => 
$ra => 
$a0 => 
$a1 => 
$s0 => 
$s1 => 
$s2 => 
$s3 => 
$s4 => 
$s5 => 
$s6 => 
$s7 => 
t174 => 
t175 => 
val it = () : unit
====================Test7=====================
val it = () : unit
Parsing file: ../tests/test7.tig
LetExp([
 FunctionDec[
  (do_nothing1,[
   (a,false,int),
   (b,false,string)],
SOME(int),
   SeqExp[
    CallExp(do_nothing2,[
     OpExp(PlusOp,
      VarExp(
       SimpleVar(a)),
      IntExp(1))]),
    IntExp(0)]),
  (do_nothing2,[
   (d,false,int)],
SOME(string),
   SeqExp[
    CallExp(do_nothing1,[
     VarExp(
      SimpleVar(d)),
     StringExp("str")]),
    StringExp(" ")])]],
 SeqExp[
  CallExp(do_nothing1,[
   IntExp(0),
   StringExp("str2")])])
Semanting Analysis: 
Generating IR Tree: 
New body:
LABEL L72
MOVE(
 TEMP t102,
 CALL(
  NAME L64,
   TEMP t108,
   CONST 0,
   NAME L70))
EXP(
 TEMP t102)
JUMP(
 NAME L71)
LABEL L71
String:
L70: str2
String:
L69: str2
New body:
LABEL L74
MOVE(
 TEMP t102,
 CALL(
  NAME L64,
   MEM(
    BINOP(PLUS,
     CONST 0,
     TEMP t108)),
   TEMP t181,
   NAME L67))
EXP(
 TEMP t102)
EXP(
 NAME L68)
JUMP(
 NAME L73)
LABEL L73
String:
L68:  
String:
L67: str
String:
L66: str
New body:
LABEL L76
MOVE(
 TEMP t102,
 CALL(
  NAME L65,
   MEM(
    BINOP(PLUS,
     CONST 0,
     TEMP t108)),
   BINOP(PLUS,
    TEMP t179,
    CONST 1)))
EXP(
 TEMP t102)
JUMP(
 NAME L75)
LABEL L75
Going to step 2 :)
emit L0
L78:
move    $a0, $fp
addi    $a1, $r0, 0
la      t182, L70
move    $a2, t182
jal     L64
move    $rv, $rv
j       L77
L77:
doing label L77
doing label L78
Printing Flow Graph
Node: L77:

 -> Successors:
 -> Predecessors:
   L78:
move    $a0, $fp
addi    $a1, $r0, 0
la      t182, L70
move    $a2, t182
jal     L64
move    $rv, $rv
j       L77

Node: L78:
move    $a0, $fp
addi    $a1, $r0, 0
la      t182, L70
move    $a2, t182
jal     L64
move    $rv, $rv
j       L77

 -> Successors:
   L77:

 -> Predecessors:
Frame L77
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L78
Defs: $rv, $ra, $a0, $a1, $a2, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t182, 
Uses: $r0, $fp, 
==================Printing Interference Graph==================
$rv => 
$ra => 
$a0 => 
$a1 => 
$a2 => 
$s0 => 
$s1 => 
$s2 => 
$s3 => 
$s4 => 
$s5 => 
$s6 => 
$s7 => 
t182 => 
L70: str2
L69: str2
emit L65
L80:
lw      t183, 0($fp)
move    $a0, t183
move    $a1, t181
la      t184, L67
move    $a2, t184
jal     L64
move    $rv, $rv
la      t185, L68
j       L79
L79:
doing label L79
doing label L80
Printing Flow Graph
Node: L79:

 -> Successors:
 -> Predecessors:
   L80:
lw      t183, 0($fp)
move    $a0, t183
move    $a1, t181
la      t184, L67
move    $a2, t184
jal     L64
move    $rv, $rv
la      t185, L68
j       L79

Node: L80:
lw      t183, 0($fp)
move    $a0, t183
move    $a1, t181
la      t184, L67
move    $a2, t184
jal     L64
move    $rv, $rv
la      t185, L68
j       L79

 -> Successors:
   L79:

 -> Predecessors:
Frame L79
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L80
Defs: $rv, $ra, $a0, $a1, $a2, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t183, t184, t185, 
Uses: $fp, t181, 
==================Printing Interference Graph==================
$rv => 
$ra => 
$a0 => 
$a1 => 
$a2 => 
$s0 => 
$s1 => 
$s2 => 
$s3 => 
$s4 => 
$s5 => 
$s6 => 
$s7 => 
t183 => 
t184 => 
t185 => 
L68:  
L67: str
L66: str
emit L64
L82:
lw      t186, 0($fp)
move    $a0, t186
addi    t187, t179, 1
move    $a1, t187
jal     L65
move    $rv, $rv
j       L81
L81:
doing label L81
doing label L82
Printing Flow Graph
Node: L81:

 -> Successors:
 -> Predecessors:
   L82:
lw      t186, 0($fp)
move    $a0, t186
addi    t187, t179, 1
move    $a1, t187
jal     L65
move    $rv, $rv
j       L81

Node: L82:
lw      t186, 0($fp)
move    $a0, t186
addi    t187, t179, 1
move    $a1, t187
jal     L65
move    $rv, $rv
j       L81

 -> Successors:
   L81:

 -> Predecessors:
Frame L81
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L82
Defs: $rv, $ra, $a0, $a1, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t186, t187, 
Uses: $fp, t179, 
==================Printing Interference Graph==================
$rv => 
$ra => 
$a0 => 
$a1 => 
$s0 => 
$s1 => 
$s2 => 
$s3 => 
$s4 => 
$s5 => 
$s6 => 
$s7 => 
t186 => 
t187 => 
val it = () : unit
====================Test8=====================
val it = () : unit
Parsing file: ../tests/test8.tig
IfExp(
 SeqExp[
  OpExp(GtOp,
   IntExp(10),
   IntExp(20))],
 IntExp(30),
 IntExp(40))
Semanting Analysis: 
Generating IR Tree: 
New body:
LABEL L88
CJUMP(GT,
 CONST 10,
 CONST 20,
 L84,L85)
LABEL L85
MOVE(
 TEMP t188,
 CONST 40)
LABEL L86
EXP(
 TEMP t188)
JUMP(
 NAME L87)
LABEL L84
MOVE(
 TEMP t188,
 CONST 30)
JUMP(
 NAME L86)
LABEL L87
Going to step 2 :)
emit L0
L90:
addi    t190, $r0, 10
addi    t189, t190, -20
bgtz    t189, L84
j       L85
L85:
addi    t188, $r0, 40
L86:
j       L89
L84:
addi    t188, $r0, 30
j       L86
L89:
doing label L84
doing label L85
../tests/test8.tig0.0:Internal failure: Last instr not jump.
doing label L86
doing label L89
doing label L90
Printing Flow Graph
Node: L84:
addi    t188, $r0, 30
j       L86

 -> Successors:
 -> Predecessors:
   L90:
addi    t190, $r0, 10
addi    t189, t190, -20
bgtz    t189, L84
j       L85

Node: L85:
addi    t188, $r0, 40

 -> Successors:
 -> Predecessors:
   L90:
addi    t190, $r0, 10
addi    t189, t190, -20
bgtz    t189, L84
j       L85

Node: L86:
j       L89

 -> Successors:
   L89:

 -> Predecessors:
Node: L89:

 -> Successors:
 -> Predecessors:
   L86:
j       L89

Node: L90:
addi    t190, $r0, 10
addi    t189, t190, -20
bgtz    t189, L84
j       L85

 -> Successors:
   L84:
addi    t188, $r0, 30
j       L86

   L85:
addi    t188, $r0, 40

 -> Predecessors:
Frame L84
Defs: t188, 
Uses: $r0, 
Frame L85
Defs: t188, 
Uses: $r0, 
Frame L86
Defs: 
Uses: 
Frame L89
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L90
Defs: t189, t190, 
Uses: $r0, 
==================Printing Interference Graph==================
t188 => 
t189 => 
t190 => 
val it = () : unit
====================Test12=====================
val it = () : unit
Parsing file: ../tests/test12.tig
LetExp([
 VarDec(a,false,NONE,
  IntExp(0))],
 SeqExp[
  ForExp(
i,false,
   IntExp(0),
   IntExp(100),
   SeqExp[
    AssignExp(
     SimpleVar(a),
     OpExp(PlusOp,
      VarExp(
       SimpleVar(a)),
      IntExp(1))),
    SeqExp[]])])
Semanting Analysis: 
Generating IR Tree: 
New body:
LABEL L96
MOVE(
 TEMP t191,
 CONST 0)
MOVE(
 TEMP t192,
 CONST 0)
CJUMP(LE,
 TEMP t192,
 CONST 100,
 L93,L92)
LABEL L92
JUMP(
 NAME L95)
LABEL L93
MOVE(
 TEMP t191,
 BINOP(PLUS,
  TEMP t191,
  CONST 1))
CJUMP(GT,
 TEMP t192,
 CONST 100,
 L92,L94)
LABEL L94
MOVE(
 TEMP t192,
 BINOP(PLUS,
  TEMP t192,
  CONST 1))
JUMP(
 NAME L93)
LABEL L95
Going to step 2 :)
emit L0
L98:
addi    t191, $r0, 0
addi    t192, $r0, 0
addi    t193, t192, -100
blez    t193, L93
j       L92
L92:
j       L97
L93:
addi    t194, t191, 1
move    t191, t194
addi    t195, t192, -100
bgtz    t195, L92
j       L94
L94:
addi    t196, t192, 1
move    t192, t196
j       L93
L97:
doing label L92
doing label L93
doing label L94
doing label L97
doing label L98
Printing Flow Graph
Node: L92:
j       L97

 -> Successors:
   L97:

 -> Predecessors:
   L93:
addi    t194, t191, 1
move    t191, t194
addi    t195, t192, -100
bgtz    t195, L92
j       L94

   L98:
addi    t191, $r0, 0
addi    t192, $r0, 0
addi    t193, t192, -100
blez    t193, L93
j       L92

Node: L93:
addi    t194, t191, 1
move    t191, t194
addi    t195, t192, -100
bgtz    t195, L92
j       L94

 -> Successors:
   L92:
j       L97

   L94:
addi    t196, t192, 1
move    t192, t196
j       L93

 -> Predecessors:
   L94:
addi    t196, t192, 1
move    t192, t196
j       L93

   L98:
addi    t191, $r0, 0
addi    t192, $r0, 0
addi    t193, t192, -100
blez    t193, L93
j       L92

Node: L94:
addi    t196, t192, 1
move    t192, t196
j       L93

 -> Successors:
   L93:
addi    t194, t191, 1
move    t191, t194
addi    t195, t192, -100
bgtz    t195, L92
j       L94

 -> Predecessors:
   L93:
addi    t194, t191, 1
move    t191, t194
addi    t195, t192, -100
bgtz    t195, L92
j       L94

Node: L97:

 -> Successors:
 -> Predecessors:
   L92:
j       L97

Node: L98:
addi    t191, $r0, 0
addi    t192, $r0, 0
addi    t193, t192, -100
blez    t193, L93
j       L92

 -> Successors:
   L92:
j       L97

   L93:
addi    t194, t191, 1
move    t191, t194
addi    t195, t192, -100
bgtz    t195, L92
j       L94

 -> Predecessors:
Frame L92
Defs: 
Uses: 
Frame L93
Defs: t191, t194, t195, 
Uses: t191, t192, 
Frame L94
Defs: t192, t196, 
Uses: t192, 
Frame L97
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L98
Defs: t191, t192, t193, 
Uses: $r0, 
==================Printing Interference Graph==================
t191 => 
t192 => 
t193 => 
t194 => 
t195 => 
t196 => 
val it = () : unit
====================Test27=====================
val it = () : unit
Parsing file: ../tests/test27.tig
LetExp([
 VarDec(a,false,NONE,
  IntExp(0)),
 FunctionDec[
  (g,[
   (a,false,int)],
SOME(int),
   VarExp(
    SimpleVar(a)))]],
 SeqExp[
  CallExp(g,[
   IntExp(2)])])
Semanting Analysis: 
Generating IR Tree: 
New body:
LABEL L102
MOVE(
 TEMP t197,
 CONST 0)
MOVE(
 TEMP t102,
 CALL(
  NAME L100,
   TEMP t108,
   CONST 2))
EXP(
 TEMP t102)
JUMP(
 NAME L101)
LABEL L101
New body:
LABEL L104
EXP(
 TEMP t199)
JUMP(
 NAME L103)
LABEL L103
Going to step 2 :)
emit L0
L106:
addi    t197, $r0, 0
move    $a0, $fp
addi    $a1, $r0, 2
jal     L100
move    $rv, $rv
j       L105
L105:
doing label L105
doing label L106
Printing Flow Graph
Node: L105:

 -> Successors:
 -> Predecessors:
   L106:
addi    t197, $r0, 0
move    $a0, $fp
addi    $a1, $r0, 2
jal     L100
move    $rv, $rv
j       L105

Node: L106:
addi    t197, $r0, 0
move    $a0, $fp
addi    $a1, $r0, 2
jal     L100
move    $rv, $rv
j       L105

 -> Successors:
   L105:

 -> Predecessors:
Frame L105
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L106
Defs: $rv, $ra, $a0, $a1, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t197, 
Uses: $r0, $fp, 
==================Printing Interference Graph==================
$rv => 
$ra => 
$a0 => 
$a1 => 
$s0 => 
$s1 => 
$s2 => 
$s3 => 
$s4 => 
$s5 => 
$s6 => 
$s7 => 
t197 => 
emit L100
L108:
j       L107
L107:
doing label L107
doing label L108
Printing Flow Graph
Node: L107:

 -> Successors:
 -> Predecessors:
   L108:
j       L107

Node: L108:
j       L107

 -> Successors:
   L107:

 -> Predecessors:
Frame L107
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L108
Defs: 
Uses: 
==================Printing Interference Graph==================
val it = () : unit
====================Test30=====================
val it = () : unit
Parsing file: ../tests/test30.tig
LetExp([
 TypeDec[
  (a,
   ArrayTy(int)),
  (b,
   NameTy(a))],
 VarDec(arr1,false,SOME(a),
  ArrayExp(b,
   IntExp(10),
   IntExp(0)))],
 SeqExp[
  VarExp(
   SubscriptVar(
    SimpleVar(arr1),
    IntExp(2)))])
Semanting Analysis: 
Generating IR Tree: 
New body:
LABEL L117
MOVE(
 TEMP t200,
 CALL(
  NAME initArray,
   CONST 11,
   CONST 0))
MOVE(
 MEM(
  TEMP t200),
 CONST 10)
MOVE(
 TEMP t201,
 TEMP t200)
MOVE(
 TEMP t202,
 CONST 1)
CJUMP(LT,
 CONST 2,
 CONST 0,
 L112,L113)
LABEL L113
MOVE(
 TEMP t202,
 CONST 0)
LABEL L112
MOVE(
 TEMP t204,
 TEMP t202)
MOVE(
 TEMP t203,
 CONST 1)
CJUMP(GE,
 CONST 2,
 MEM(
  TEMP t201),
 L114,L115)
LABEL L115
MOVE(
 TEMP t203,
 CONST 0)
LABEL L114
CJUMP(NE,
 CONST 0,
 BINOP(OR,
  TEMP t204,
  TEMP t203),
 L110,L111)
LABEL L111
EXP(
 MEM(
  BINOP(PLUS,
   TEMP t201,
   BINOP(MUL,
    CONST 3,
    CONST 4))))
JUMP(
 NAME L116)
LABEL L110
Runtime Error: array out of bounds check

JUMP(
 NAME L111)
LABEL L116
Going to step 2 :)
emit L0
L119:
addi    $a0, $r0, 11
addi    $a1, $r0, 0
jal     initArray
move    t200, $rv
addi    t206, $r0, 10
sw      t206, 0(t200)
move    t201, t200
addi    t202, $r0, 1
addi    t208, $r0, 2
addi    t207, t208, 0
bltz    t207, L112
j       L113
L113:
addi    t202, $r0, 0
L112:
move    t205, t202
addi    t203, $r0, 1
addi    t210, $r0, 2
lw      t211, 0(t201)
sub     t209, t210, t211
bgez    t209, L114
j       L115
L115:
addi    t203, $r0, 0
L114:
addi    t213, $r0, 0
or      t214, t205, t203
sub     t212, t213, t214
bnez    t212, L110
j       L111
L111:
addi    t218, $r0, 3
addi    t219, $r0, 4
mul     t217, t218, t219
add     t216, t201, t217
lw      t215, 0(t216)
j       L118
L110:
addi    $rv, $r0, 10
syscall
j       L111
L118:
doing label L110
doing label L111
doing label L112
doing label L113
../tests/test30.tig0.0:Internal failure: Last instr not jump.
doing label L114
doing label L115
../tests/test30.tig0.0:Internal failure: Last instr not jump.
doing label L118
doing label L119
Printing Flow Graph
Node: L110:
addi    $rv, $r0, 10
syscall
j       L111

 -> Successors:
 -> Predecessors:
Node: L111:
addi    t218, $r0, 3
addi    t219, $r0, 4
mul     t217, t218, t219
add     t216, t201, t217
lw      t215, 0(t216)
j       L118

 -> Successors:
 -> Predecessors:
Node: L112:
move    t205, t202
addi    t203, $r0, 1
addi    t210, $r0, 2
lw      t211, 0(t201)
sub     t209, t210, t211
bgez    t209, L114
j       L115

 -> Successors:
 -> Predecessors:
   L119:
addi    $a0, $r0, 11
addi    $a1, $r0, 0
jal     initArray
move    t200, $rv
addi    t206, $r0, 10
sw      t206, 0(t200)
move    t201, t200
addi    t202, $r0, 1
addi    t208, $r0, 2
addi    t207, t208, 0
bltz    t207, L112
j       L113

Node: L113:
addi    t202, $r0, 0

 -> Successors:
 -> Predecessors:
   L119:
addi    $a0, $r0, 11
addi    $a1, $r0, 0
jal     initArray
move    t200, $rv
addi    t206, $r0, 10
sw      t206, 0(t200)
move    t201, t200
addi    t202, $r0, 1
addi    t208, $r0, 2
addi    t207, t208, 0
bltz    t207, L112
j       L113

Node: L114:
addi    t213, $r0, 0
or      t214, t205, t203
sub     t212, t213, t214
bnez    t212, L110
j       L111

 -> Successors:
 -> Predecessors:
Node: L115:
addi    t203, $r0, 0

 -> Successors:
 -> Predecessors:
Node: L118:

 -> Successors:
 -> Predecessors:
Node: L119:
addi    $a0, $r0, 11
addi    $a1, $r0, 0
jal     initArray
move    t200, $rv
addi    t206, $r0, 10
sw      t206, 0(t200)
move    t201, t200
addi    t202, $r0, 1
addi    t208, $r0, 2
addi    t207, t208, 0
bltz    t207, L112
j       L113

 -> Successors:
   L112:
move    t205, t202
addi    t203, $r0, 1
addi    t210, $r0, 2
lw      t211, 0(t201)
sub     t209, t210, t211
bgez    t209, L114
j       L115

   L113:
addi    t202, $r0, 0

 -> Predecessors:
Frame L110
Defs: $rv, 
Uses: $r0, 
Frame L111
Defs: t215, t216, t217, t218, t219, 
Uses: $r0, t201, 
Frame L112
Defs: t203, t205, t209, t210, t211, 
Uses: $r0, t201, t202, 
Frame L113
Defs: t202, 
Uses: $r0, 
Frame L114
Defs: t212, t213, t214, 
Uses: $r0, t203, t205, 
Frame L115
Defs: t203, 
Uses: $r0, 
Frame L118
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L119
Defs: $rv, $ra, $a0, $a1, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t200, t201, t202, t206, t207, t208, 
Uses: $r0, 
==================Printing Interference Graph==================
$rv => 
$ra => 
$a0 => 
$a1 => 
$s0 => 
$s1 => 
$s2 => 
$s3 => 
$s4 => 
$s5 => 
$s6 => 
$s7 => 
t200 => 
t201 => 
t202 => 
t203 => 
t205 => 
t206 => 
t207 => 
t208 => 
t209 => 
t210 => 
t211 => 
t212 => 
t213 => 
t214 => 
t215 => 
t216 => 
t217 => 
t218 => 
t219 => 
val it = () : unit
====================Test37=====================
val it = () : unit
Parsing file: ../tests/test37.tig
LetExp([
 VarDec(a,false,NONE,
  IntExp(0)),
 VarDec(a,false,NONE,
  StringExp(" "))],
 SeqExp[
  IntExp(0)])
Semanting Analysis: 
Generating IR Tree: 
New body:
LABEL L123
MOVE(
 TEMP t220,
 CONST 0)
MOVE(
 TEMP t221,
 NAME L121)
JUMP(
 NAME L122)
LABEL L122
String:
L121:  
Going to step 2 :)
emit L0
L125:
addi    t220, $r0, 0
la      t222, L121
move    t221, t222
j       L124
L124:
doing label L124
doing label L125
Printing Flow Graph
Node: L124:

 -> Successors:
 -> Predecessors:
   L125:
addi    t220, $r0, 0
la      t222, L121
move    t221, t222
j       L124

Node: L125:
addi    t220, $r0, 0
la      t222, L121
move    t221, t222
j       L124

 -> Successors:
   L124:

 -> Predecessors:
Frame L124
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L125
Defs: t220, t221, t222, 
Uses: $r0, 
==================Printing Interference Graph==================
t220 => 
t221 => 
t222 => 
L121:  
val it = () : unit
====================Test41=====================
val it = () : unit
Parsing file: ../tests/test41.tig
LetExp([
 TypeDec[
  (a,
   NameTy(int))]],
 SeqExp[
  LetExp([
   TypeDec[
    (a,
     NameTy(string))]],
   SeqExp[
    IntExp(0)])])
Semanting Analysis: 
Generating IR Tree: 
New body:
LABEL L128
EXP(
 CONST 0)
JUMP(
 NAME L127)
LABEL L127
Going to step 2 :)
emit L0
L130:
addi    t223, $r0, 0
j       L129
L129:
doing label L129
doing label L130
Printing Flow Graph
Node: L129:

 -> Successors:
 -> Predecessors:
   L130:
addi    t223, $r0, 0
j       L129

Node: L130:
addi    t223, $r0, 0
j       L129

 -> Successors:
   L129:

 -> Predecessors:
Frame L129
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L130
Defs: t223, 
Uses: $r0, 
==================Printing Interference Graph==================
t223 => 
val it = () : unit
====================Test42=====================
val it = () : unit
Parsing file: ../tests/test42.tig
LetExp([
 TypeDec[
  (arrtype1,
   ArrayTy(int)),
  (rectype1,
   RecordTy[
    (name,false,string),
    (address,false,string),
    (id,false,int),
    (age,false,int)]),
  (arrtype2,
   ArrayTy(rectype1)),
  (rectype2,
   RecordTy[
    (name,false,string),
    (dates,false,arrtype1)]),
  (arrtype3,
   ArrayTy(string))],
 VarDec(arr1,false,NONE,
  ArrayExp(arrtype1,
   IntExp(10),
   IntExp(0))),
 VarDec(arr2,false,NONE,
  ArrayExp(arrtype2,
   IntExp(5),
   RecordExp(rectype1,[
    (name,
     StringExp("aname")),
    (address,
     StringExp("somewhere")),
    (id,
     IntExp(0)),
    (age,
     IntExp(0))]))),
 VarDec(arr3,false,SOME(arrtype3),
  ArrayExp(arrtype3,
   IntExp(100),
   StringExp(""))),
 VarDec(rec1,false,NONE,
  RecordExp(rectype1,[
   (name,
    StringExp("Kapoios")),
   (address,
    StringExp("Kapou")),
   (id,
    IntExp(2432)),
   (age,
    IntExp(44))])),
 VarDec(rec2,false,NONE,
  RecordExp(rectype2,[
   (name,
    StringExp("Allos")),
   (dates,
    ArrayExp(arrtype1,
     IntExp(3),
     IntExp(1900)))]))],
 SeqExp[
  AssignExp(
   SubscriptVar(
    SimpleVar(arr1),
    IntExp(0)),
   IntExp(1)),
  AssignExp(
   SubscriptVar(
    SimpleVar(arr1),
    IntExp(9)),
   IntExp(3)),
  AssignExp(
   FieldVar(
    SubscriptVar(
     SimpleVar(arr2),
     IntExp(3)),
    name),
   StringExp("kati")),
  AssignExp(
   FieldVar(
    SubscriptVar(
     SimpleVar(arr2),
     IntExp(1)),
    age),
   IntExp(23)),
  AssignExp(
   SubscriptVar(
    SimpleVar(arr3),
    IntExp(34)),
   StringExp("sfd")),
  AssignExp(
   FieldVar(
    SimpleVar(rec1),
    name),
   StringExp("sdf")),
  AssignExp(
   SubscriptVar(
    FieldVar(
     SimpleVar(rec2),
     dates),
    IntExp(0)),
   IntExp(2323)),
  AssignExp(
   SubscriptVar(
    FieldVar(
     SimpleVar(rec2),
     dates),
    IntExp(2)),
   IntExp(2323))])
Semanting Analysis: 
Generating IR Tree: 
New body:
LABEL L194
MOVE(
 TEMP t224,
 CALL(
  NAME initArray,
   CONST 11,
   CONST 0))
MOVE(
 MEM(
  TEMP t224),
 CONST 10)
MOVE(
 TEMP t225,
 TEMP t224)
MOVE(
 TEMP t226,
 CALL(
  NAME allocRecord,
   CONST 4))
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t226,
   CONST 0)),
 NAME L132)
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t226,
   CONST 4)),
 NAME L133)
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t226,
   CONST 8)),
 CONST 0)
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t226,
   CONST 12)),
 CONST 0)
MOVE(
 TEMP t227,
 CALL(
  NAME initArray,
   CONST 6,
   TEMP t226))
MOVE(
 MEM(
  TEMP t227),
 CONST 5)
MOVE(
 TEMP t228,
 TEMP t227)
MOVE(
 TEMP t229,
 CALL(
  NAME initArray,
   CONST 101,
   NAME L134))
MOVE(
 MEM(
  TEMP t229),
 CONST 100)
MOVE(
 TEMP t230,
 TEMP t229)
MOVE(
 TEMP t231,
 CALL(
  NAME allocRecord,
   CONST 4))
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t231,
   CONST 0)),
 NAME L135)
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t231,
   CONST 4)),
 NAME L136)
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t231,
   CONST 8)),
 CONST 2432)
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t231,
   CONST 12)),
 CONST 44)
MOVE(
 TEMP t232,
 TEMP t231)
MOVE(
 TEMP t234,
 CALL(
  NAME allocRecord,
   CONST 2))
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t234,
   CONST 0)),
 NAME L137)
MOVE(
 TEMP t250,
 BINOP(PLUS,
  TEMP t234,
  CONST 4))
MOVE(
 TEMP t233,
 CALL(
  NAME initArray,
   CONST 4,
   CONST 1900))
MOVE(
 MEM(
  TEMP t233),
 CONST 3)
MOVE(
 MEM(
  TEMP t250),
 TEMP t233)
MOVE(
 TEMP t235,
 TEMP t234)
MOVE(
 TEMP t236,
 CONST 1)
CJUMP(LT,
 CONST 0,
 CONST 0,
 L140,L141)
LABEL L141
MOVE(
 TEMP t236,
 CONST 0)
LABEL L140
MOVE(
 TEMP t251,
 TEMP t236)
MOVE(
 TEMP t237,
 CONST 1)
CJUMP(GE,
 CONST 0,
 MEM(
  TEMP t225),
 L142,L143)
LABEL L143
MOVE(
 TEMP t237,
 CONST 0)
LABEL L142
CJUMP(NE,
 CONST 0,
 BINOP(OR,
  TEMP t251,
  TEMP t237),
 L138,L139)
LABEL L139
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t225,
   BINOP(MUL,
    CONST 1,
    CONST 4))),
 CONST 1)
MOVE(
 TEMP t238,
 CONST 1)
CJUMP(LT,
 CONST 9,
 CONST 0,
 L146,L147)
LABEL L147
MOVE(
 TEMP t238,
 CONST 0)
LABEL L146
MOVE(
 TEMP t252,
 TEMP t238)
MOVE(
 TEMP t239,
 CONST 1)
CJUMP(GE,
 CONST 9,
 MEM(
  TEMP t225),
 L148,L149)
LABEL L149
MOVE(
 TEMP t239,
 CONST 0)
LABEL L148
CJUMP(NE,
 CONST 0,
 BINOP(OR,
  TEMP t252,
  TEMP t239),
 L144,L145)
LABEL L145
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t225,
   BINOP(MUL,
    CONST 10,
    CONST 4))),
 CONST 3)
MOVE(
 TEMP t240,
 CONST 1)
CJUMP(LT,
 CONST 3,
 CONST 0,
 L152,L153)
LABEL L153
MOVE(
 TEMP t240,
 CONST 0)
LABEL L152
MOVE(
 TEMP t253,
 TEMP t240)
MOVE(
 TEMP t241,
 CONST 1)
CJUMP(GE,
 CONST 3,
 MEM(
  TEMP t228),
 L154,L155)
LABEL L155
MOVE(
 TEMP t241,
 CONST 0)
LABEL L154
CJUMP(NE,
 CONST 0,
 BINOP(OR,
  TEMP t253,
  TEMP t241),
 L150,L151)
LABEL L151
CJUMP(EQ,
 CONST 0,
 MEM(
  BINOP(PLUS,
   TEMP t228,
   BINOP(MUL,
    CONST 4,
    CONST 4))),
 L156,L157)
LABEL L157
MOVE(
 TEMP t240,
 CONST 1)
CJUMP(LT,
 CONST 3,
 CONST 0,
 L152,L195)
LABEL L195
JUMP(
 NAME L153)
LABEL L138
Runtime Error: array out of bounds check

JUMP(
 NAME L139)
LABEL L144
Runtime Error: array out of bounds check

JUMP(
 NAME L145)
LABEL L150
Runtime Error: array out of bounds check

JUMP(
 NAME L151)
LABEL L156
Runtime Error: nil dereference check

JUMP(
 NAME L157)
LABEL L162
MOVE(
 TEMP t242,
 CONST 0)
LABEL L161
MOVE(
 TEMP t255,
 TEMP t242)
MOVE(
 TEMP t243,
 CONST 1)
CJUMP(GE,
 CONST 1,
 MEM(
  TEMP t228),
 L163,L164)
LABEL L164
MOVE(
 TEMP t243,
 CONST 0)
LABEL L163
CJUMP(NE,
 CONST 0,
 BINOP(OR,
  TEMP t255,
  TEMP t243),
 L159,L160)
LABEL L160
CJUMP(EQ,
 CONST 0,
 MEM(
  BINOP(PLUS,
   TEMP t228,
   BINOP(MUL,
    CONST 2,
    CONST 4))),
 L165,L166)
LABEL L166
MOVE(
 TEMP t242,
 CONST 1)
CJUMP(LT,
 CONST 1,
 CONST 0,
 L161,L196)
LABEL L196
JUMP(
 NAME L162)
LABEL L159
Runtime Error: array out of bounds check

JUMP(
 NAME L160)
LABEL L165
Runtime Error: nil dereference check

JUMP(
 NAME L166)
LABEL L170
MOVE(
 TEMP t244,
 CONST 0)
LABEL L169
MOVE(
 TEMP t257,
 TEMP t244)
MOVE(
 TEMP t245,
 CONST 1)
CJUMP(GE,
 CONST 34,
 MEM(
  TEMP t230),
 L171,L172)
LABEL L172
MOVE(
 TEMP t245,
 CONST 0)
LABEL L171
CJUMP(NE,
 CONST 0,
 BINOP(OR,
  TEMP t257,
  TEMP t245),
 L167,L168)
LABEL L168
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t230,
   BINOP(MUL,
    CONST 35,
    CONST 4))),
 NAME L173)
CJUMP(EQ,
 CONST 0,
 TEMP t232,
 L174,L175)
LABEL L175
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t232,
   BINOP(MUL,
    CONST 0,
    CONST 4))),
 NAME L176)
MOVE(
 TEMP t246,
 CONST 1)
CJUMP(LT,
 CONST 0,
 CONST 0,
 L181,L182)
LABEL L182
MOVE(
 TEMP t246,
 CONST 0)
LABEL L181
MOVE(
 TEMP t258,
 TEMP t246)
MOVE(
 TEMP t247,
 CONST 1)
CJUMP(EQ,
 CONST 0,
 TEMP t235,
 L177,L178)
LABEL L178
CJUMP(GE,
 CONST 0,
 MEM(
  MEM(
   BINOP(PLUS,
    TEMP t235,
    BINOP(MUL,
     CONST 1,
     CONST 4)))),
 L183,L184)
LABEL L184
MOVE(
 TEMP t247,
 CONST 0)
LABEL L183
CJUMP(NE,
 CONST 0,
 BINOP(OR,
  TEMP t258,
  TEMP t247),
 L179,L180)
LABEL L180
CJUMP(NE,
 CONST 0,
 TEMP t235,
 L178,L177)
LABEL L177
Runtime Error: nil dereference check

JUMP(
 NAME L178)
LABEL L167
Runtime Error: array out of bounds check

JUMP(
 NAME L168)
LABEL L174
Runtime Error: nil dereference check

JUMP(
 NAME L175)
LABEL L179
Runtime Error: array out of bounds check

JUMP(
 NAME L180)
LABEL L190
MOVE(
 TEMP t248,
 CONST 0)
LABEL L189
MOVE(
 TEMP t259,
 TEMP t248)
MOVE(
 TEMP t249,
 CONST 1)
CJUMP(EQ,
 CONST 0,
 TEMP t235,
 L185,L186)
LABEL L186
CJUMP(GE,
 CONST 2,
 MEM(
  MEM(
   BINOP(PLUS,
    TEMP t235,
    BINOP(MUL,
     CONST 1,
     CONST 4)))),
 L191,L192)
LABEL L192
MOVE(
 TEMP t249,
 CONST 0)
LABEL L191
CJUMP(NE,
 CONST 0,
 BINOP(OR,
  TEMP t259,
  TEMP t249),
 L187,L188)
LABEL L188
CJUMP(NE,
 CONST 0,
 TEMP t235,
 L186,L185)
LABEL L185
Runtime Error: nil dereference check

JUMP(
 NAME L186)
LABEL L187
Runtime Error: array out of bounds check

JUMP(
 NAME L188)
LABEL L193
String:
L176: sdf
String:
L173: sfd
String:
L158: kati
String:
L137: Allos
String:
L136: Kapou
String:
L135: Kapoios
String:
L134: 
String:
L133: somewhere
String:
L132: aname
Going to step 2 :)
emit L0
L198:
addi    $a0, $r0, 11
addi    $a1, $r0, 0
jal     initArray
move    t224, $rv
addi    t270, $r0, 10
sw      t270, 0(t224)
move    t225, t224
addi    $a0, $r0, 4
jal     allocRecord
move    t226, $rv
la      t271, L132
sw      t271, 0(t226)
la      t272, L133
sw      t272, 4(t226)
addi    t273, $r0, 0
sw      t273, 8(t226)
addi    t274, $r0, 0
sw      t274, 12(t226)
addi    $a0, $r0, 6
move    $a1, t226
jal     initArray
move    t227, $rv
addi    t275, $r0, 5
sw      t275, 0(t227)
move    t228, t227
addi    $a0, $r0, 101
la      t276, L134
move    $a1, t276
jal     initArray
move    t229, $rv
addi    t277, $r0, 100
sw      t277, 0(t229)
move    t230, t229
addi    $a0, $r0, 4
jal     allocRecord
move    t231, $rv
la      t278, L135
sw      t278, 0(t231)
la      t279, L136
sw      t279, 4(t231)
addi    t280, $r0, 2432
sw      t280, 8(t231)
addi    t281, $r0, 44
sw      t281, 12(t231)
move    t232, t231
addi    $a0, $r0, 2
jal     allocRecord
move    t234, $rv
la      t282, L137
sw      t282, 0(t234)
addi    t283, t234, 4
move    t260, t283
addi    $a0, $r0, 4
addi    $a1, $r0, 1900
jal     initArray
move    t233, $rv
addi    t284, $r0, 3
sw      t284, 0(t233)
sw      t233, 0(t260)
move    t235, t234
addi    t236, $r0, 1
addi    t286, $r0, 0
addi    t285, t286, 0
bltz    t285, L140
j       L141
L141:
addi    t236, $r0, 0
L140:
move    t261, t236
addi    t237, $r0, 1
addi    t288, $r0, 0
lw      t289, 0(t225)
sub     t287, t288, t289
bgez    t287, L142
j       L143
L143:
addi    t237, $r0, 0
L142:
addi    t291, $r0, 0
or      t292, t261, t237
sub     t290, t291, t292
bnez    t290, L138
j       L139
L139:
addi    t293, $r0, 1
addi    t296, $r0, 1
addi    t297, $r0, 4
mul     t295, t296, t297
add     t294, t225, t295
sw      t293, 0(t294)
addi    t238, $r0, 1
addi    t299, $r0, 9
addi    t298, t299, 0
bltz    t298, L146
j       L147
L147:
addi    t238, $r0, 0
L146:
move    t262, t238
addi    t239, $r0, 1
addi    t301, $r0, 9
lw      t302, 0(t225)
sub     t300, t301, t302
bgez    t300, L148
j       L149
L149:
addi    t239, $r0, 0
L148:
addi    t304, $r0, 0
or      t305, t262, t239
sub     t303, t304, t305
bnez    t303, L144
j       L145
L145:
addi    t306, $r0, 3
addi    t309, $r0, 10
addi    t310, $r0, 4
mul     t308, t309, t310
add     t307, t225, t308
sw      t306, 0(t307)
addi    t240, $r0, 1
addi    t312, $r0, 3
addi    t311, t312, 0
bltz    t311, L152
j       L153
L153:
addi    t240, $r0, 0
L152:
move    t263, t240
addi    t241, $r0, 1
addi    t314, $r0, 3
lw      t315, 0(t228)
sub     t313, t314, t315
bgez    t313, L154
j       L155
L155:
addi    t241, $r0, 0
L154:
addi    t317, $r0, 0
or      t318, t263, t241
sub     t316, t317, t318
bnez    t316, L150
j       L151
L151:
addi    t320, $r0, 0
addi    t324, $r0, 4
addi    t325, $r0, 4
mul     t323, t324, t325
add     t322, t228, t323
lw      t321, 0(t322)
sub     t319, t320, t321
beqz    t319, L156
j       L157
L157:
addi    t240, $r0, 1
addi    t327, $r0, 3
addi    t326, t327, 0
bltz    t326, L152
j       L199
L199:
j       L153
L138:
addi    $rv, $r0, 10
syscall
j       L139
L144:
addi    $rv, $r0, 10
syscall
j       L145
L150:
addi    $rv, $r0, 10
syscall
j       L151
L156:
addi    $rv, $r0, 10
syscall
j       L157
L162:
addi    t242, $r0, 0
L161:
move    t265, t242
addi    t243, $r0, 1
addi    t329, $r0, 1
lw      t330, 0(t228)
sub     t328, t329, t330
bgez    t328, L163
j       L164
L164:
addi    t243, $r0, 0
L163:
addi    t332, $r0, 0
or      t333, t265, t243
sub     t331, t332, t333
bnez    t331, L159
j       L160
L160:
addi    t335, $r0, 0
addi    t339, $r0, 2
addi    t340, $r0, 4
mul     t338, t339, t340
add     t337, t228, t338
lw      t336, 0(t337)
sub     t334, t335, t336
beqz    t334, L165
j       L166
L166:
addi    t242, $r0, 1
addi    t342, $r0, 1
addi    t341, t342, 0
bltz    t341, L161
j       L200
L200:
j       L162
L159:
addi    $rv, $r0, 10
syscall
j       L160
L165:
addi    $rv, $r0, 10
syscall
j       L166
L170:
addi    t244, $r0, 0
L169:
move    t267, t244
addi    t245, $r0, 1
addi    t344, $r0, 34
lw      t345, 0(t230)
sub     t343, t344, t345
bgez    t343, L171
j       L172
L172:
addi    t245, $r0, 0
L171:
addi    t347, $r0, 0
or      t348, t267, t245
sub     t346, t347, t348
bnez    t346, L167
j       L168
L168:
la      t349, L173
addi    t352, $r0, 35
addi    t353, $r0, 4
mul     t351, t352, t353
add     t350, t230, t351
sw      t349, 0(t350)
addi    t355, $r0, 0
sub     t354, t355, t232
beqz    t354, L174
j       L175
L175:
la      t356, L176
addi    t359, $r0, 0
addi    t360, $r0, 4
mul     t358, t359, t360
add     t357, t232, t358
sw      t356, 0(t357)
addi    t246, $r0, 1
addi    t362, $r0, 0
addi    t361, t362, 0
bltz    t361, L181
j       L182
L182:
addi    t246, $r0, 0
L181:
move    t268, t246
addi    t247, $r0, 1
addi    t364, $r0, 0
sub     t363, t364, t235
beqz    t363, L177
j       L178
L178:
addi    t366, $r0, 0
addi    t371, $r0, 1
addi    t372, $r0, 4
mul     t370, t371, t372
add     t369, t235, t370
lw      t368, 0(t369)
lw      t367, 0(t368)
sub     t365, t366, t367
bgez    t365, L183
j       L184
L184:
addi    t247, $r0, 0
L183:
addi    t374, $r0, 0
or      t375, t268, t247
sub     t373, t374, t375
bnez    t373, L179
j       L180
L180:
addi    t377, $r0, 0
sub     t376, t377, t235
bnez    t376, L178
j       L177
L177:
addi    $rv, $r0, 10
syscall
j       L178
L167:
addi    $rv, $r0, 10
syscall
j       L168
L174:
addi    $rv, $r0, 10
syscall
j       L175
L179:
addi    $rv, $r0, 10
syscall
j       L180
L190:
addi    t248, $r0, 0
L189:
move    t269, t248
addi    t249, $r0, 1
addi    t379, $r0, 0
sub     t378, t379, t235
beqz    t378, L185
j       L186
L186:
addi    t381, $r0, 2
addi    t386, $r0, 1
addi    t387, $r0, 4
mul     t385, t386, t387
add     t384, t235, t385
lw      t383, 0(t384)
lw      t382, 0(t383)
sub     t380, t381, t382
bgez    t380, L191
j       L192
L192:
addi    t249, $r0, 0
L191:
addi    t389, $r0, 0
or      t390, t269, t249
sub     t388, t389, t390
bnez    t388, L187
j       L188
L188:
addi    t392, $r0, 0
sub     t391, t392, t235
bnez    t391, L186
j       L185
L185:
addi    $rv, $r0, 10
syscall
j       L186
L187:
addi    $rv, $r0, 10
syscall
j       L188
L197:
doing label L138
doing label L139
doing label L140
doing label L141
../tests/test42.tig0.0:Internal failure: Last instr not jump.
doing label L142
doing label L143
../tests/test42.tig0.0:Internal failure: Last instr not jump.
doing label L144
doing label L145
doing label L146
doing label L147
../tests/test42.tig0.0:Internal failure: Last instr not jump.
doing label L148
doing label L149
../tests/test42.tig0.0:Internal failure: Last instr not jump.
doing label L150
doing label L151
doing label L152
doing label L153
../tests/test42.tig0.0:Internal failure: Last instr not jump.
doing label L154
doing label L155
../tests/test42.tig0.0:Internal failure: Last instr not jump.
doing label L156
doing label L157
doing label L159
doing label L160
doing label L161
doing label L162
../tests/test42.tig0.0:Internal failure: Last instr not jump.
doing label L163
doing label L164
../tests/test42.tig0.0:Internal failure: Last instr not jump.
doing label L165
doing label L166
doing label L167
doing label L168
doing label L169
doing label L170
../tests/test42.tig0.0:Internal failure: Last instr not jump.
doing label L171
doing label L172
../tests/test42.tig0.0:Internal failure: Last instr not jump.
doing label L174
doing label L175
doing label L177
doing label L178
doing label L179
doing label L180
doing label L181
doing label L182
../tests/test42.tig0.0:Internal failure: Last instr not jump.
doing label L183
doing label L184
../tests/test42.tig0.0:Internal failure: Last instr not jump.
doing label L185
doing label L186
doing label L187
doing label L188
doing label L189
doing label L190
../tests/test42.tig0.0:Internal failure: Last instr not jump.
doing label L191
doing label L192
../tests/test42.tig0.0:Internal failure: Last instr not jump.
doing label L197
doing label L198
doing label L199
doing label L200
Printing Flow Graph
Node: L138:
addi    $rv, $r0, 10
syscall
j       L139

 -> Successors:
 -> Predecessors:
Node: L139:
addi    t293, $r0, 1
addi    t296, $r0, 1
addi    t297, $r0, 4
mul     t295, t296, t297
add     t294, t225, t295
sw      t293, 0(t294)
addi    t238, $r0, 1
addi    t299, $r0, 9
addi    t298, t299, 0
bltz    t298, L146
j       L147

 -> Successors:
 -> Predecessors:
Node: L140:
move    t261, t236
addi    t237, $r0, 1
addi    t288, $r0, 0
lw      t289, 0(t225)
sub     t287, t288, t289
bgez    t287, L142
j       L143

 -> Successors:
 -> Predecessors:
   L198:
addi    $a0, $r0, 11
addi    $a1, $r0, 0
jal     initArray
move    t224, $rv
addi    t270, $r0, 10
sw      t270, 0(t224)
move    t225, t224
addi    $a0, $r0, 4
jal     allocRecord
move    t226, $rv
la      t271, L132
sw      t271, 0(t226)
la      t272, L133
sw      t272, 4(t226)
addi    t273, $r0, 0
sw      t273, 8(t226)
addi    t274, $r0, 0
sw      t274, 12(t226)
addi    $a0, $r0, 6
move    $a1, t226
jal     initArray
move    t227, $rv
addi    t275, $r0, 5
sw      t275, 0(t227)
move    t228, t227
addi    $a0, $r0, 101
la      t276, L134
move    $a1, t276
jal     initArray
move    t229, $rv
addi    t277, $r0, 100
sw      t277, 0(t229)
move    t230, t229
addi    $a0, $r0, 4
jal     allocRecord
move    t231, $rv
la      t278, L135
sw      t278, 0(t231)
la      t279, L136
sw      t279, 4(t231)
addi    t280, $r0, 2432
sw      t280, 8(t231)
addi    t281, $r0, 44
sw      t281, 12(t231)
move    t232, t231
addi    $a0, $r0, 2
jal     allocRecord
move    t234, $rv
la      t282, L137
sw      t282, 0(t234)
addi    t283, t234, 4
move    t260, t283
addi    $a0, $r0, 4
addi    $a1, $r0, 1900
jal     initArray
move    t233, $rv
addi    t284, $r0, 3
sw      t284, 0(t233)
sw      t233, 0(t260)
move    t235, t234
addi    t236, $r0, 1
addi    t286, $r0, 0
addi    t285, t286, 0
bltz    t285, L140
j       L141

Node: L141:
addi    t236, $r0, 0

 -> Successors:
 -> Predecessors:
   L198:
addi    $a0, $r0, 11
addi    $a1, $r0, 0
jal     initArray
move    t224, $rv
addi    t270, $r0, 10
sw      t270, 0(t224)
move    t225, t224
addi    $a0, $r0, 4
jal     allocRecord
move    t226, $rv
la      t271, L132
sw      t271, 0(t226)
la      t272, L133
sw      t272, 4(t226)
addi    t273, $r0, 0
sw      t273, 8(t226)
addi    t274, $r0, 0
sw      t274, 12(t226)
addi    $a0, $r0, 6
move    $a1, t226
jal     initArray
move    t227, $rv
addi    t275, $r0, 5
sw      t275, 0(t227)
move    t228, t227
addi    $a0, $r0, 101
la      t276, L134
move    $a1, t276
jal     initArray
move    t229, $rv
addi    t277, $r0, 100
sw      t277, 0(t229)
move    t230, t229
addi    $a0, $r0, 4
jal     allocRecord
move    t231, $rv
la      t278, L135
sw      t278, 0(t231)
la      t279, L136
sw      t279, 4(t231)
addi    t280, $r0, 2432
sw      t280, 8(t231)
addi    t281, $r0, 44
sw      t281, 12(t231)
move    t232, t231
addi    $a0, $r0, 2
jal     allocRecord
move    t234, $rv
la      t282, L137
sw      t282, 0(t234)
addi    t283, t234, 4
move    t260, t283
addi    $a0, $r0, 4
addi    $a1, $r0, 1900
jal     initArray
move    t233, $rv
addi    t284, $r0, 3
sw      t284, 0(t233)
sw      t233, 0(t260)
move    t235, t234
addi    t236, $r0, 1
addi    t286, $r0, 0
addi    t285, t286, 0
bltz    t285, L140
j       L141

Node: L142:
addi    t291, $r0, 0
or      t292, t261, t237
sub     t290, t291, t292
bnez    t290, L138
j       L139

 -> Successors:
 -> Predecessors:
Node: L143:
addi    t237, $r0, 0

 -> Successors:
 -> Predecessors:
Node: L144:
addi    $rv, $r0, 10
syscall
j       L145

 -> Successors:
 -> Predecessors:
Node: L145:
addi    t306, $r0, 3
addi    t309, $r0, 10
addi    t310, $r0, 4
mul     t308, t309, t310
add     t307, t225, t308
sw      t306, 0(t307)
addi    t240, $r0, 1
addi    t312, $r0, 3
addi    t311, t312, 0
bltz    t311, L152
j       L153

 -> Successors:
 -> Predecessors:
Node: L146:
move    t262, t238
addi    t239, $r0, 1
addi    t301, $r0, 9
lw      t302, 0(t225)
sub     t300, t301, t302
bgez    t300, L148
j       L149

 -> Successors:
 -> Predecessors:
Node: L147:
addi    t238, $r0, 0

 -> Successors:
 -> Predecessors:
Node: L148:
addi    t304, $r0, 0
or      t305, t262, t239
sub     t303, t304, t305
bnez    t303, L144
j       L145

 -> Successors:
 -> Predecessors:
Node: L149:
addi    t239, $r0, 0

 -> Successors:
 -> Predecessors:
Node: L150:
addi    $rv, $r0, 10
syscall
j       L151

 -> Successors:
 -> Predecessors:
Node: L151:
addi    t320, $r0, 0
addi    t324, $r0, 4
addi    t325, $r0, 4
mul     t323, t324, t325
add     t322, t228, t323
lw      t321, 0(t322)
sub     t319, t320, t321
beqz    t319, L156
j       L157

 -> Successors:
 -> Predecessors:
Node: L152:
move    t263, t240
addi    t241, $r0, 1
addi    t314, $r0, 3
lw      t315, 0(t228)
sub     t313, t314, t315
bgez    t313, L154
j       L155

 -> Successors:
 -> Predecessors:
Node: L153:
addi    t240, $r0, 0

 -> Successors:
 -> Predecessors:
   L199:
j       L153

Node: L154:
addi    t317, $r0, 0
or      t318, t263, t241
sub     t316, t317, t318
bnez    t316, L150
j       L151

 -> Successors:
 -> Predecessors:
Node: L155:
addi    t241, $r0, 0

 -> Successors:
 -> Predecessors:
Node: L156:
addi    $rv, $r0, 10
syscall
j       L157

 -> Successors:
 -> Predecessors:
Node: L157:
addi    t240, $r0, 1
addi    t327, $r0, 3
addi    t326, t327, 0
bltz    t326, L152
j       L199

 -> Successors:
 -> Predecessors:
Node: L159:
addi    $rv, $r0, 10
syscall
j       L160

 -> Successors:
 -> Predecessors:
Node: L160:
addi    t335, $r0, 0
addi    t339, $r0, 2
addi    t340, $r0, 4
mul     t338, t339, t340
add     t337, t228, t338
lw      t336, 0(t337)
sub     t334, t335, t336
beqz    t334, L165
j       L166

 -> Successors:
 -> Predecessors:
Node: L161:
move    t265, t242
addi    t243, $r0, 1
addi    t329, $r0, 1
lw      t330, 0(t228)
sub     t328, t329, t330
bgez    t328, L163
j       L164

 -> Successors:
 -> Predecessors:
Node: L162:
addi    t242, $r0, 0

 -> Successors:
 -> Predecessors:
   L200:
j       L162

Node: L163:
addi    t332, $r0, 0
or      t333, t265, t243
sub     t331, t332, t333
bnez    t331, L159
j       L160

 -> Successors:
 -> Predecessors:
Node: L164:
addi    t243, $r0, 0

 -> Successors:
 -> Predecessors:
Node: L165:
addi    $rv, $r0, 10
syscall
j       L166

 -> Successors:
 -> Predecessors:
Node: L166:
addi    t242, $r0, 1
addi    t342, $r0, 1
addi    t341, t342, 0
bltz    t341, L161
j       L200

 -> Successors:
 -> Predecessors:
Node: L167:
addi    $rv, $r0, 10
syscall
j       L168

 -> Successors:
 -> Predecessors:
Node: L168:
la      t349, L173
addi    t352, $r0, 35
addi    t353, $r0, 4
mul     t351, t352, t353
add     t350, t230, t351
sw      t349, 0(t350)
addi    t355, $r0, 0
sub     t354, t355, t232
beqz    t354, L174
j       L175

 -> Successors:
 -> Predecessors:
Node: L169:
move    t267, t244
addi    t245, $r0, 1
addi    t344, $r0, 34
lw      t345, 0(t230)
sub     t343, t344, t345
bgez    t343, L171
j       L172

 -> Successors:
 -> Predecessors:
Node: L170:
addi    t244, $r0, 0

 -> Successors:
 -> Predecessors:
Node: L171:
addi    t347, $r0, 0
or      t348, t267, t245
sub     t346, t347, t348
bnez    t346, L167
j       L168

 -> Successors:
 -> Predecessors:
Node: L172:
addi    t245, $r0, 0

 -> Successors:
 -> Predecessors:
Node: L174:
addi    $rv, $r0, 10
syscall
j       L175

 -> Successors:
 -> Predecessors:
Node: L175:
la      t356, L176
addi    t359, $r0, 0
addi    t360, $r0, 4
mul     t358, t359, t360
add     t357, t232, t358
sw      t356, 0(t357)
addi    t246, $r0, 1
addi    t362, $r0, 0
addi    t361, t362, 0
bltz    t361, L181
j       L182

 -> Successors:
 -> Predecessors:
Node: L177:
addi    $rv, $r0, 10
syscall
j       L178

 -> Successors:
 -> Predecessors:
Node: L178:
addi    t366, $r0, 0
addi    t371, $r0, 1
addi    t372, $r0, 4
mul     t370, t371, t372
add     t369, t235, t370
lw      t368, 0(t369)
lw      t367, 0(t368)
sub     t365, t366, t367
bgez    t365, L183
j       L184

 -> Successors:
 -> Predecessors:
Node: L179:
addi    $rv, $r0, 10
syscall
j       L180

 -> Successors:
 -> Predecessors:
Node: L180:
addi    t377, $r0, 0
sub     t376, t377, t235
bnez    t376, L178
j       L177

 -> Successors:
 -> Predecessors:
Node: L181:
move    t268, t246
addi    t247, $r0, 1
addi    t364, $r0, 0
sub     t363, t364, t235
beqz    t363, L177
j       L178

 -> Successors:
 -> Predecessors:
Node: L182:
addi    t246, $r0, 0

 -> Successors:
 -> Predecessors:
Node: L183:
addi    t374, $r0, 0
or      t375, t268, t247
sub     t373, t374, t375
bnez    t373, L179
j       L180

 -> Successors:
 -> Predecessors:
Node: L184:
addi    t247, $r0, 0

 -> Successors:
 -> Predecessors:
Node: L185:
addi    $rv, $r0, 10
syscall
j       L186

 -> Successors:
 -> Predecessors:
Node: L186:
addi    t381, $r0, 2
addi    t386, $r0, 1
addi    t387, $r0, 4
mul     t385, t386, t387
add     t384, t235, t385
lw      t383, 0(t384)
lw      t382, 0(t383)
sub     t380, t381, t382
bgez    t380, L191
j       L192

 -> Successors:
 -> Predecessors:
Node: L187:
addi    $rv, $r0, 10
syscall
j       L188

 -> Successors:
 -> Predecessors:
Node: L188:
addi    t392, $r0, 0
sub     t391, t392, t235
bnez    t391, L186
j       L185

 -> Successors:
 -> Predecessors:
Node: L189:
move    t269, t248
addi    t249, $r0, 1
addi    t379, $r0, 0
sub     t378, t379, t235
beqz    t378, L185
j       L186

 -> Successors:
 -> Predecessors:
Node: L190:
addi    t248, $r0, 0

 -> Successors:
 -> Predecessors:
Node: L191:
addi    t389, $r0, 0
or      t390, t269, t249
sub     t388, t389, t390
bnez    t388, L187
j       L188

 -> Successors:
 -> Predecessors:
Node: L192:
addi    t249, $r0, 0

 -> Successors:
 -> Predecessors:
Node: L197:

 -> Successors:
 -> Predecessors:
Node: L198:
addi    $a0, $r0, 11
addi    $a1, $r0, 0
jal     initArray
move    t224, $rv
addi    t270, $r0, 10
sw      t270, 0(t224)
move    t225, t224
addi    $a0, $r0, 4
jal     allocRecord
move    t226, $rv
la      t271, L132
sw      t271, 0(t226)
la      t272, L133
sw      t272, 4(t226)
addi    t273, $r0, 0
sw      t273, 8(t226)
addi    t274, $r0, 0
sw      t274, 12(t226)
addi    $a0, $r0, 6
move    $a1, t226
jal     initArray
move    t227, $rv
addi    t275, $r0, 5
sw      t275, 0(t227)
move    t228, t227
addi    $a0, $r0, 101
la      t276, L134
move    $a1, t276
jal     initArray
move    t229, $rv
addi    t277, $r0, 100
sw      t277, 0(t229)
move    t230, t229
addi    $a0, $r0, 4
jal     allocRecord
move    t231, $rv
la      t278, L135
sw      t278, 0(t231)
la      t279, L136
sw      t279, 4(t231)
addi    t280, $r0, 2432
sw      t280, 8(t231)
addi    t281, $r0, 44
sw      t281, 12(t231)
move    t232, t231
addi    $a0, $r0, 2
jal     allocRecord
move    t234, $rv
la      t282, L137
sw      t282, 0(t234)
addi    t283, t234, 4
move    t260, t283
addi    $a0, $r0, 4
addi    $a1, $r0, 1900
jal     initArray
move    t233, $rv
addi    t284, $r0, 3
sw      t284, 0(t233)
sw      t233, 0(t260)
move    t235, t234
addi    t236, $r0, 1
addi    t286, $r0, 0
addi    t285, t286, 0
bltz    t285, L140
j       L141

 -> Successors:
   L140:
move    t261, t236
addi    t237, $r0, 1
addi    t288, $r0, 0
lw      t289, 0(t225)
sub     t287, t288, t289
bgez    t287, L142
j       L143

   L141:
addi    t236, $r0, 0

 -> Predecessors:
Node: L199:
j       L153

 -> Successors:
   L153:
addi    t240, $r0, 0

 -> Predecessors:
Node: L200:
j       L162

 -> Successors:
   L162:
addi    t242, $r0, 0

 -> Predecessors:
Frame L138
Defs: $rv, 
Uses: $r0, 
Frame L139
Defs: t238, t293, t294, t295, t296, t297, t298, t299, 
Uses: $r0, t225, 
Frame L140
Defs: t237, t261, t287, t288, t289, 
Uses: $r0, t225, t236, 
Frame L141
Defs: t236, 
Uses: $r0, 
Frame L142
Defs: t290, t291, t292, 
Uses: $r0, t237, t261, 
Frame L143
Defs: t237, 
Uses: $r0, 
Frame L144
Defs: $rv, 
Uses: $r0, 
Frame L145
Defs: t240, t306, t307, t308, t309, t310, t311, t312, 
Uses: $r0, t225, 
Frame L146
Defs: t239, t262, t300, t301, t302, 
Uses: $r0, t225, t238, 
Frame L147
Defs: t238, 
Uses: $r0, 
Frame L148
Defs: t303, t304, t305, 
Uses: $r0, t239, t262, 
Frame L149
Defs: t239, 
Uses: $r0, 
Frame L150
Defs: $rv, 
Uses: $r0, 
Frame L151
Defs: t319, t320, t321, t322, t323, t324, t325, 
Uses: $r0, t228, 
Frame L152
Defs: t241, t263, t313, t314, t315, 
Uses: $r0, t228, t240, 
Frame L153
Defs: t240, 
Uses: $r0, 
Frame L154
Defs: t316, t317, t318, 
Uses: $r0, t241, t263, 
Frame L155
Defs: t241, 
Uses: $r0, 
Frame L156
Defs: $rv, 
Uses: $r0, 
Frame L157
Defs: t240, t326, t327, 
Uses: $r0, 
Frame L159
Defs: $rv, 
Uses: $r0, 
Frame L160
Defs: t334, t335, t336, t337, t338, t339, t340, 
Uses: $r0, t228, 
Frame L161
Defs: t243, t265, t328, t329, t330, 
Uses: $r0, t228, t242, 
Frame L162
Defs: t242, 
Uses: $r0, 
Frame L163
Defs: t331, t332, t333, 
Uses: $r0, t243, t265, 
Frame L164
Defs: t243, 
Uses: $r0, 
Frame L165
Defs: $rv, 
Uses: $r0, 
Frame L166
Defs: t242, t341, t342, 
Uses: $r0, 
Frame L167
Defs: $rv, 
Uses: $r0, 
Frame L168
Defs: t349, t350, t351, t352, t353, t354, t355, 
Uses: $r0, t230, t232, 
Frame L169
Defs: t245, t267, t343, t344, t345, 
Uses: $r0, t230, t244, 
Frame L170
Defs: t244, 
Uses: $r0, 
Frame L171
Defs: t346, t347, t348, 
Uses: $r0, t245, t267, 
Frame L172
Defs: t245, 
Uses: $r0, 
Frame L174
Defs: $rv, 
Uses: $r0, 
Frame L175
Defs: t246, t356, t357, t358, t359, t360, t361, t362, 
Uses: $r0, t232, 
Frame L177
Defs: $rv, 
Uses: $r0, 
Frame L178
Defs: t365, t366, t367, t368, t369, t370, t371, t372, 
Uses: $r0, t235, 
Frame L179
Defs: $rv, 
Uses: $r0, 
Frame L180
Defs: t376, t377, 
Uses: $r0, t235, 
Frame L181
Defs: t247, t268, t363, t364, 
Uses: $r0, t235, t246, 
Frame L182
Defs: t246, 
Uses: $r0, 
Frame L183
Defs: t373, t374, t375, 
Uses: $r0, t247, t268, 
Frame L184
Defs: t247, 
Uses: $r0, 
Frame L185
Defs: $rv, 
Uses: $r0, 
Frame L186
Defs: t380, t381, t382, t383, t384, t385, t386, t387, 
Uses: $r0, t235, 
Frame L187
Defs: $rv, 
Uses: $r0, 
Frame L188
Defs: t391, t392, 
Uses: $r0, t235, 
Frame L189
Defs: t249, t269, t378, t379, 
Uses: $r0, t235, t248, 
Frame L190
Defs: t248, 
Uses: $r0, 
Frame L191
Defs: t388, t389, t390, 
Uses: $r0, t249, t269, 
Frame L192
Defs: t249, 
Uses: $r0, 
Frame L197
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L198
Defs: $rv, $ra, $a0, $a1, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t224, t225, t226, t227, t228, t229, t230, t231, t232, t233, t234, t235, t236, t260, t270, t271, t272, t273, t274, t275, t276, t277, t278, t279, t280, t281, t282, t283, t284, t285, t286, 
Uses: $r0, 
Frame L199
Defs: 
Uses: 
Frame L200
Defs: 
Uses: 
==================Printing Interference Graph==================
$rv => 
$ra => 
$a0 => 
$a1 => 
$s0 => 
$s1 => 
$s2 => 
$s3 => 
$s4 => 
$s5 => 
$s6 => 
$s7 => 
t224 => 
t225 => 
t226 => 
t227 => 
t228 => 
t229 => 
t230 => 
t231 => 
t232 => 
t233 => 
t234 => 
t235 => 
t236 => 
t237 => 
t238 => 
t239 => 
t240 => 
t241 => 
t242 => 
t243 => 
t244 => 
t245 => 
t246 => 
t247 => 
t248 => 
t249 => 
t260 => 
t261 => 
t262 => 
t263 => 
t265 => 
t267 => 
t268 => 
t269 => 
t270 => 
t271 => 
t272 => 
t273 => 
t274 => 
t275 => 
t276 => 
t277 => 
t278 => 
t279 => 
t280 => 
t281 => 
t282 => 
t283 => 
t284 => 
t285 => 
t286 => 
t287 => 
t288 => 
t289 => 
t290 => 
t291 => 
t292 => 
t293 => 
t294 => 
t295 => 
t296 => 
t297 => 
t298 => 
t299 => 
t300 => 
t301 => 
t302 => 
t303 => 
t304 => 
t305 => 
t306 => 
t307 => 
t308 => 
t309 => 
t310 => 
t311 => 
t312 => 
t313 => 
t314 => 
t315 => 
t316 => 
t317 => 
t318 => 
t319 => 
t320 => 
t321 => 
t322 => 
t323 => 
t324 => 
t325 => 
t326 => 
t327 => 
t328 => 
t329 => 
t330 => 
t331 => 
t332 => 
t333 => 
t334 => 
t335 => 
t336 => 
t337 => 
t338 => 
t339 => 
t340 => 
t341 => 
t342 => 
t343 => 
t344 => 
t345 => 
t346 => 
t347 => 
t348 => 
t349 => 
t350 => 
t351 => 
t352 => 
t353 => 
t354 => 
t355 => 
t356 => 
t357 => 
t358 => 
t359 => 
t360 => 
t361 => 
t362 => 
t363 => 
t364 => 
t365 => 
t366 => 
t367 => 
t368 => 
t369 => 
t370 => 
t371 => 
t372 => 
t373 => 
t374 => 
t375 => 
t376 => 
t377 => 
t378 => 
t379 => 
t380 => 
t381 => 
t382 => 
t383 => 
t384 => 
t385 => 
t386 => 
t387 => 
t388 => 
t389 => 
t390 => 
t391 => 
t392 => 
L176: sdf
L173: sfd
L158: kati
L137: Allos
L136: Kapou
L135: Kapoios
L134: 
L133: somewhere
L132: aname
val it = () : unit
====================Test44=====================
val it = () : unit
Parsing file: ../tests/test44.tig
LetExp([
 TypeDec[
  (rectype,
   RecordTy[
    (name,false,string),
    (id,false,int)])],
 VarDec(b,false,SOME(rectype),
  NilExp)],
 SeqExp[
  AssignExp(
   SimpleVar(b),
   NilExp)])
Semanting Analysis: 
Generating IR Tree: 
New body:
LABEL L203
MOVE(
 TEMP t393,
 CONST 0)
MOVE(
 TEMP t393,
 CONST 0)
JUMP(
 NAME L202)
LABEL L202
Going to step 2 :)
emit L0
L205:
addi    t393, $r0, 0
addi    t393, $r0, 0
j       L204
L204:
doing label L204
doing label L205
Printing Flow Graph
Node: L204:

 -> Successors:
 -> Predecessors:
   L205:
addi    t393, $r0, 0
addi    t393, $r0, 0
j       L204

Node: L205:
addi    t393, $r0, 0
addi    t393, $r0, 0
j       L204

 -> Successors:
   L204:

 -> Predecessors:
Frame L204
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L205
Defs: t393, 
Uses: $r0, 
==================Printing Interference Graph==================
t393 => 
val it = () : unit
====================Test46=====================
val it = () : unit
Parsing file: ../tests/test46.tig
LetExp([
 TypeDec[
  (rectype,
   RecordTy[
    (name,false,string),
    (id,false,int)])],
 VarDec(b,false,SOME(rectype),
  NilExp)],
 SeqExp[
  OpExp(EqOp,
   VarExp(
    SimpleVar(b)),
   NilExp),
  OpExp(NeqOp,
   VarExp(
    SimpleVar(b)),
   NilExp)])
Semanting Analysis: 
Generating IR Tree: 
New body:
LABEL L211
MOVE(
 TEMP t394,
 CONST 0)
CJUMP(EQ,
 TEMP t394,
 CONST 0,
 L207,L207)
LABEL L207
MOVE(
 TEMP t395,
 CONST 1)
CJUMP(NE,
 TEMP t394,
 CONST 0,
 L208,L209)
LABEL L209
MOVE(
 TEMP t395,
 CONST 0)
LABEL L208
EXP(
 TEMP t395)
JUMP(
 NAME L210)
LABEL L210
Going to step 2 :)
emit L0
L213:
addi    t394, $r0, 0
addi    t396, t394, 0
beqz    t396, L207
j       L207
L207:
addi    t395, $r0, 1
addi    t397, t394, 0
bnez    t397, L208
j       L209
L209:
addi    t395, $r0, 0
L208:
j       L212
L212:
doing label L207
doing label L208
doing label L209
../tests/test46.tig0.0:Internal failure: Last instr not jump.
doing label L212
doing label L213
Printing Flow Graph
Node: L207:
addi    t395, $r0, 1
addi    t397, t394, 0
bnez    t397, L208
j       L209

 -> Successors:
 -> Predecessors:
   L213:
addi    t394, $r0, 0
addi    t396, t394, 0
beqz    t396, L207
j       L207

Node: L208:
j       L212

 -> Successors:
 -> Predecessors:
Node: L209:
addi    t395, $r0, 0

 -> Successors:
 -> Predecessors:
Node: L212:

 -> Successors:
 -> Predecessors:
Node: L213:
addi    t394, $r0, 0
addi    t396, t394, 0
beqz    t396, L207
j       L207

 -> Successors:
   L207:
addi    t395, $r0, 1
addi    t397, t394, 0
bnez    t397, L208
j       L209

 -> Predecessors:
Frame L207
Defs: t395, t397, 
Uses: $r0, t394, 
Frame L208
Defs: 
Uses: 
Frame L209
Defs: t395, 
Uses: $r0, 
Frame L212
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L213
Defs: t394, t396, 
Uses: $r0, 
==================Printing Interference Graph==================
t394 => 
t395 => 
t396 => 
t397 => 
val it = () : unit
====================Test47=====================
val it = () : unit
Parsing file: ../tests/test47.tig
LetExp([
 TypeDec[
  (a,
   NameTy(int))],
 VarDec(b,false,NONE,
  IntExp(4)),
 TypeDec[
  (a,
   NameTy(string))]],
 SeqExp[
  IntExp(0)])
Semanting Analysis: 
Generating IR Tree: 
New body:
LABEL L216
MOVE(
 TEMP t398,
 CONST 4)
JUMP(
 NAME L215)
LABEL L215
Going to step 2 :)
emit L0
L218:
addi    t398, $r0, 4
j       L217
L217:
doing label L217
doing label L218
Printing Flow Graph
Node: L217:

 -> Successors:
 -> Predecessors:
   L218:
addi    t398, $r0, 4
j       L217

Node: L218:
addi    t398, $r0, 4
j       L217

 -> Successors:
   L217:

 -> Predecessors:
Frame L217
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L218
Defs: t398, 
Uses: $r0, 
==================Printing Interference Graph==================
t398 => 
val it = () : unit
====================Test48=====================
val it = () : unit
Parsing file: ../tests/test48.tig
LetExp([
 FunctionDec[
  (g,[
   (a,false,int)],
SOME(int),
   VarExp(
    SimpleVar(a)))],
 TypeDec[
  (t,
   NameTy(int))],
 FunctionDec[
  (g,[
   (a,false,int)],
SOME(int),
   VarExp(
    SimpleVar(a)))]],
 SeqExp[
  IntExp(0)])
Semanting Analysis: 
Generating IR Tree: 
New body:
LABEL L223
EXP(
 CONST 0)
JUMP(
 NAME L222)
LABEL L222
New body:
LABEL L225
EXP(
 TEMP t402)
JUMP(
 NAME L224)
LABEL L224
New body:
LABEL L227
EXP(
 TEMP t400)
JUMP(
 NAME L226)
LABEL L226
Going to step 2 :)
emit L0
L229:
addi    t403, $r0, 0
j       L228
L228:
doing label L228
doing label L229
Printing Flow Graph
Node: L228:

 -> Successors:
 -> Predecessors:
   L229:
addi    t403, $r0, 0
j       L228

Node: L229:
addi    t403, $r0, 0
j       L228

 -> Successors:
   L228:

 -> Predecessors:
Frame L228
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L229
Defs: t403, 
Uses: $r0, 
==================Printing Interference Graph==================
t403 => 
emit L221
L231:
j       L230
L230:
doing label L230
doing label L231
Printing Flow Graph
Node: L230:

 -> Successors:
 -> Predecessors:
   L231:
j       L230

Node: L231:
j       L230

 -> Successors:
   L230:

 -> Predecessors:
Frame L230
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L231
Defs: 
Uses: 
==================Printing Interference Graph==================
emit L220
L233:
j       L232
L232:
doing label L232
doing label L233
Printing Flow Graph
Node: L232:

 -> Successors:
 -> Predecessors:
   L233:
j       L232

Node: L233:
j       L232

 -> Successors:
   L232:

 -> Predecessors:
Frame L232
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L233
Defs: 
Uses: 
==================Printing Interference Graph==================
val it = () : unit
====================Merge======================
val it = () : unit
Parsing file: ../tests/merge.tig
LetExp([
 TypeDec[
  (any,
   RecordTy[
    (any,false,int)])],
 VarDec(buffer,false,NONE,
  CallExp(getchar,[])),
 FunctionDec[
  (readint,[
   (any,false,any)],
SOME(int),
   LetExp([
    VarDec(i,false,NONE,
     IntExp(0)),
    FunctionDec[
     (isdigit,[
      (s,false,string)],
SOME(int),
      IfExp(
       OpExp(GeOp,
        CallExp(ord,[
         VarExp(
          SimpleVar(buffer))]),
        CallExp(ord,[
         StringExp("0")])),
       OpExp(LeOp,
        CallExp(ord,[
         VarExp(
          SimpleVar(buffer))]),
        CallExp(ord,[
         StringExp("9")])),
       IntExp(0))),
     (skipto,[],
NONE,
      WhileExp(
       IfExp(
        OpExp(EqOp,
         VarExp(
          SimpleVar(buffer)),
         StringExp(" ")),
        IntExp(1),
        OpExp(EqOp,
         VarExp(
          SimpleVar(buffer)),
         StringExp("
"))),
       AssignExp(
        SimpleVar(buffer),
        CallExp(getchar,[]))))]],
    SeqExp[
     CallExp(skipto,[]),
     AssignExp(
      FieldVar(
       SimpleVar(any),
       any),
      CallExp(isdigit,[
       VarExp(
        SimpleVar(buffer))])),
     WhileExp(
      CallExp(isdigit,[
       VarExp(
        SimpleVar(buffer))]),
      SeqExp[
       AssignExp(
        SimpleVar(i),
        OpExp(MinusOp,
         OpExp(PlusOp,
          OpExp(TimesOp,
           VarExp(
            SimpleVar(i)),
           IntExp(10)),
          CallExp(ord,[
           VarExp(
            SimpleVar(buffer))])),
         CallExp(ord,[
          StringExp("0")]))),
       AssignExp(
        SimpleVar(buffer),
        CallExp(getchar,[]))]),
     VarExp(
      SimpleVar(i))]))],
 TypeDec[
  (list,
   RecordTy[
    (first,false,int),
    (rest,false,list)])],
 FunctionDec[
  (readlist,[],
SOME(list),
   LetExp([
    VarDec(any,false,NONE,
     RecordExp(any,[
      (any,
       IntExp(0))])),
    VarDec(i,false,NONE,
     CallExp(readint,[
      VarExp(
       SimpleVar(any))]))],
    SeqExp[
     IfExp(
      VarExp(
       FieldVar(
        SimpleVar(any),
        any)),
      RecordExp(list,[
       (first,
        VarExp(
         SimpleVar(i))),
       (rest,
        CallExp(readlist,[]))]),
      NilExp)])),
  (merge,[
   (a,false,list),
   (b,false,list)],
SOME(list),
   IfExp(
    OpExp(EqOp,
     VarExp(
      SimpleVar(a)),
     NilExp),
    VarExp(
     SimpleVar(b)),
    IfExp(
     OpExp(EqOp,
      VarExp(
       SimpleVar(b)),
      NilExp),
     VarExp(
      SimpleVar(a)),
     IfExp(
      OpExp(LtOp,
       VarExp(
        FieldVar(
         SimpleVar(a),
         first)),
       VarExp(
        FieldVar(
         SimpleVar(b),
         first))),
      RecordExp(list,[
       (first,
        VarExp(
         FieldVar(
          SimpleVar(a),
          first))),
       (rest,
        CallExp(merge,[
         VarExp(
          FieldVar(
           SimpleVar(a),
           rest)),
         VarExp(
          SimpleVar(b))]))]),
      RecordExp(list,[
       (first,
        VarExp(
         FieldVar(
          SimpleVar(b),
          first))),
       (rest,
        CallExp(merge,[
         VarExp(
          SimpleVar(a)),
         VarExp(
          FieldVar(
           SimpleVar(b),
           rest))]))]))))),
  (printint,[
   (i,false,int)],
NONE,
   LetExp([
    FunctionDec[
     (f,[
      (i,false,int)],
NONE,
      IfExp(
       OpExp(GtOp,
        VarExp(
         SimpleVar(i)),
        IntExp(0)),
       SeqExp[
        CallExp(f,[
         OpExp(DivideOp,
          VarExp(
           SimpleVar(i)),
          IntExp(10))]),
        CallExp(print,[
         CallExp(chr,[
          OpExp(PlusOp,
           OpExp(MinusOp,
            VarExp(
             SimpleVar(i)),
            OpExp(TimesOp,
             OpExp(DivideOp,
              VarExp(
               SimpleVar(i)),
              IntExp(10)),
             IntExp(10))),
           CallExp(ord,[
            StringExp("0")]))])])]))]],
    SeqExp[
     IfExp(
      OpExp(LtOp,
       VarExp(
        SimpleVar(i)),
       IntExp(0)),
      SeqExp[
       CallExp(print,[
        StringExp("-")]),
       CallExp(f,[
        OpExp(MinusOp,
         IntExp(0),
         VarExp(
          SimpleVar(i)))])],
      IfExp(
       OpExp(GtOp,
        VarExp(
         SimpleVar(i)),
        IntExp(0)),
       CallExp(f,[
        VarExp(
         SimpleVar(i))]),
       CallExp(print,[
        StringExp("0")])))])),
  (printlist,[
   (l,false,list)],
NONE,
   IfExp(
    OpExp(EqOp,
     VarExp(
      SimpleVar(l)),
     NilExp),
    CallExp(print,[
     StringExp("
")]),
    SeqExp[
     CallExp(printint,[
      VarExp(
       FieldVar(
        SimpleVar(l),
        first))]),
     CallExp(print,[
      StringExp(" ")]),
     CallExp(printlist,[
      VarExp(
       FieldVar(
        SimpleVar(l),
        rest))])]))],
 VarDec(list1,false,NONE,
  CallExp(readlist,[])),
 VarDec(list2,false,NONE,
  SeqExp[
   AssignExp(
    SimpleVar(buffer),
    CallExp(getchar,[])),
   CallExp(readlist,[])])],
 SeqExp[
  CallExp(printlist,[
   CallExp(merge,[
    VarExp(
     SimpleVar(list1)),
    VarExp(
     SimpleVar(list2))])])])
Semanting Analysis: 
Generating IR Tree: 
New body:
LABEL L346
MOVE(
 TEMP t438,
 BINOP(PLUS,
  TEMP t108,
  CONST 0))
MOVE(
 TEMP t102,
 CALL(
  NAME L1,
   CONST 0))
MOVE(
 MEM(
  TEMP t438),
 TEMP t102)
MOVE(
 TEMP t102,
 CALL(
  NAME L267,
   TEMP t108))
MOVE(
 TEMP t436,
 TEMP t102)
MOVE(
 TEMP t439,
 BINOP(PLUS,
  TEMP t108,
  CONST 0))
MOVE(
 TEMP t102,
 CALL(
  NAME L1,
   CONST 0))
MOVE(
 MEM(
  TEMP t439),
 TEMP t102)
MOVE(
 TEMP t102,
 CALL(
  NAME L267,
   TEMP t108))
MOVE(
 TEMP t437,
 TEMP t102)
MOVE(
 TEMP t440,
 TEMP t108)
MOVE(
 TEMP t102,
 CALL(
  NAME L268,
   TEMP t108,
   TEMP t436,
   TEMP t437))
MOVE(
 TEMP t102,
 CALL(
  NAME L270,
   TEMP t440,
   TEMP t102))
EXP(
 TEMP t102)
JUMP(
 NAME L345)
LABEL L345
New body:
LABEL L348
CJUMP(EQ,
 TEMP t434,
 CONST 0,
 L342,L343)
LABEL L343
MOVE(
 TEMP t441,
 MEM(
  BINOP(PLUS,
   CONST 0,
   TEMP t108)))
CJUMP(EQ,
 CONST 0,
 TEMP t434,
 L334,L335)
LABEL L335
MOVE(
 TEMP t102,
 CALL(
  NAME L269,
   TEMP t441,
   MEM(
    BINOP(PLUS,
     TEMP t434,
     BINOP(MUL,
      CONST 0,
      CONST 4)))))
EXP(
 TEMP t102)
MOVE(
 TEMP t102,
 CALL(
  NAME L1,
   CONST 0,
   NAME L337))
EXP(
 TEMP t102)
MOVE(
 TEMP t442,
 MEM(
  BINOP(PLUS,
   CONST 0,
   TEMP t108)))
CJUMP(EQ,
 CONST 0,
 TEMP t434,
 L340,L341)
LABEL L341
MOVE(
 TEMP t102,
 CALL(
  NAME L270,
   TEMP t442,
   MEM(
    BINOP(PLUS,
     TEMP t434,
     BINOP(MUL,
      CONST 1,
      CONST 4)))))
MOVE(
 TEMP t435,
 TEMP t102)
LABEL L344
EXP(
 TEMP t435)
JUMP(
 NAME L347)
LABEL L342
MOVE(
 TEMP t102,
 CALL(
  NAME L1,
   CONST 0,
   NAME L331))
MOVE(
 TEMP t435,
 TEMP t102)
JUMP(
 NAME L344)
LABEL L334
Runtime Error: nil dereference check

JUMP(
 NAME L335)
LABEL L340
Runtime Error: nil dereference check

JUMP(
 NAME L341)
LABEL L347
String:
L337:  
String:
L336:  
String:
L331: 

String:
L330: 

New body:
LABEL L350
CJUMP(LT,
 TEMP t428,
 CONST 0,
 L327,L328)
LABEL L328
CJUMP(GT,
 TEMP t428,
 CONST 0,
 L324,L325)
LABEL L325
MOVE(
 TEMP t102,
 CALL(
  NAME L1,
   CONST 0,
   NAME L323))
MOVE(
 TEMP t432,
 TEMP t102)
LABEL L326
MOVE(
 TEMP t433,
 TEMP t432)
LABEL L329
EXP(
 TEMP t433)
JUMP(
 NAME L349)
LABEL L327
MOVE(
 TEMP t102,
 CALL(
  NAME L1,
   CONST 0,
   NAME L321))
EXP(
 TEMP t102)
MOVE(
 TEMP t102,
 CALL(
  NAME L301,
   TEMP t108,
   BINOP(MINUS,
    CONST 0,
    TEMP t428)))
MOVE(
 TEMP t433,
 TEMP t102)
JUMP(
 NAME L329)
LABEL L324
MOVE(
 TEMP t102,
 CALL(
  NAME L301,
   TEMP t108,
   TEMP t428))
MOVE(
 TEMP t432,
 TEMP t102)
JUMP(
 NAME L326)
LABEL L349
String:
L323: 0
String:
L322: 0
String:
L321: -
String:
L320: -
New body:
LABEL L352
CJUMP(GT,
 TEMP t430,
 CONST 0,
 L319,L318)
LABEL L318
EXP(
 TEMP t431)
JUMP(
 NAME L351)
LABEL L319
MOVE(
 TEMP t102,
 CALL(
  NAME L301,
   MEM(
    BINOP(PLUS,
     CONST 0,
     TEMP t108)),
   BINOP(DIV,
    TEMP t430,
    CONST 10)))
EXP(
 TEMP t102)
MOVE(
 TEMP t443,
 BINOP(MINUS,
  TEMP t430,
  BINOP(MUL,
   BINOP(DIV,
    TEMP t430,
    CONST 10),
   CONST 10)))
MOVE(
 TEMP t102,
 CALL(
  NAME L1,
   CONST 0,
   NAME L317))
MOVE(
 TEMP t102,
 CALL(
  NAME L1,
   CONST 0,
   BINOP(PLUS,
    TEMP t443,
    TEMP t102)))
MOVE(
 TEMP t102,
 CALL(
  NAME L1,
   CONST 0,
   TEMP t102))
MOVE(
 TEMP t431,
 TEMP t102)
JUMP(
 NAME L318)
LABEL L351
String:
L317: 0
String:
L316: 0
String:
L315: 0
String:
L314: 0
String:
L313: 0
String:
L312: 0
String:
L311: 0
String:
L310: 0
String:
L309: 0
String:
L308: 0
String:
L307: 0
String:
L306: 0
String:
L305: 0
String:
L304: 0
String:
L303: 0
String:
L302: 0
New body:
LABEL L354
CJUMP(EQ,
 TEMP t421,
 CONST 0,
 L298,L299)
LABEL L299
CJUMP(EQ,
 TEMP t422,
 CONST 0,
 L295,L296)
LABEL L296
CJUMP(EQ,
 CONST 0,
 TEMP t421,
 L276,L277)
LABEL L277
MOVE(
 TEMP t444,
 MEM(
  BINOP(PLUS,
   TEMP t421,
   BINOP(MUL,
    CONST 0,
    CONST 4))))
CJUMP(EQ,
 CONST 0,
 TEMP t422,
 L278,L279)
LABEL L279
CJUMP(LT,
 TEMP t444,
 MEM(
  BINOP(PLUS,
   TEMP t422,
   BINOP(MUL,
    CONST 0,
    CONST 4))),
 L292,L293)
LABEL L293
MOVE(
 TEMP t424,
 CALL(
  NAME allocRecord,
   CONST 2))
MOVE(
 TEMP t448,
 BINOP(PLUS,
  TEMP t424,
  CONST 0))
CJUMP(EQ,
 CONST 0,
 TEMP t422,
 L286,L287)
LABEL L287
MOVE(
 MEM(
  TEMP t448),
 MEM(
  BINOP(PLUS,
   TEMP t422,
   BINOP(MUL,
    CONST 0,
    CONST 4))))
MOVE(
 TEMP t451,
 BINOP(PLUS,
  TEMP t424,
  CONST 4))
MOVE(
 TEMP t450,
 MEM(
  BINOP(PLUS,
   CONST 0,
   TEMP t108)))
MOVE(
 TEMP t449,
 TEMP t421)
CJUMP(EQ,
 CONST 0,
 TEMP t422,
 L290,L291)
LABEL L291
MOVE(
 TEMP t102,
 CALL(
  NAME L268,
   TEMP t450,
   TEMP t449,
   MEM(
    BINOP(PLUS,
     TEMP t422,
     BINOP(MUL,
      CONST 1,
      CONST 4)))))
MOVE(
 MEM(
  TEMP t451),
 TEMP t102)
MOVE(
 TEMP t425,
 TEMP t424)
LABEL L294
MOVE(
 TEMP t426,
 TEMP t425)
LABEL L297
MOVE(
 TEMP t427,
 TEMP t426)
LABEL L300
EXP(
 TEMP t427)
JUMP(
 NAME L353)
LABEL L298
MOVE(
 TEMP t427,
 TEMP t422)
JUMP(
 NAME L300)
LABEL L295
MOVE(
 TEMP t426,
 TEMP t421)
JUMP(
 NAME L297)
LABEL L276
Runtime Error: nil dereference check

JUMP(
 NAME L277)
LABEL L278
Runtime Error: nil dereference check

JUMP(
 NAME L279)
LABEL L292
MOVE(
 TEMP t423,
 CALL(
  NAME allocRecord,
   CONST 2))
MOVE(
 TEMP t445,
 BINOP(PLUS,
  TEMP t423,
  CONST 0))
CJUMP(EQ,
 CONST 0,
 TEMP t421,
 L280,L281)
LABEL L281
MOVE(
 MEM(
  TEMP t445),
 MEM(
  BINOP(PLUS,
   TEMP t421,
   BINOP(MUL,
    CONST 0,
    CONST 4))))
MOVE(
 TEMP t447,
 BINOP(PLUS,
  TEMP t423,
  CONST 4))
MOVE(
 TEMP t446,
 MEM(
  BINOP(PLUS,
   CONST 0,
   TEMP t108)))
CJUMP(EQ,
 CONST 0,
 TEMP t421,
 L284,L285)
LABEL L285
MOVE(
 TEMP t102,
 CALL(
  NAME L268,
   TEMP t446,
   MEM(
    BINOP(PLUS,
     TEMP t421,
     BINOP(MUL,
      CONST 1,
      CONST 4))),
   TEMP t422))
MOVE(
 MEM(
  TEMP t447),
 TEMP t102)
MOVE(
 TEMP t425,
 TEMP t423)
JUMP(
 NAME L294)
LABEL L280
Runtime Error: nil dereference check

JUMP(
 NAME L281)
LABEL L284
Runtime Error: nil dereference check

JUMP(
 NAME L285)
LABEL L286
Runtime Error: nil dereference check

JUMP(
 NAME L287)
LABEL L290
Runtime Error: nil dereference check

JUMP(
 NAME L291)
LABEL L353
New body:
LABEL L356
MOVE(
 TEMP t416,
 CALL(
  NAME allocRecord,
   CONST 1))
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t416,
   CONST 0)),
 CONST 0)
MOVE(
 TEMP t417,
 TEMP t416)
MOVE(
 TEMP t102,
 CALL(
  NAME L235,
   MEM(
    BINOP(PLUS,
     CONST 0,
     TEMP t108)),
   TEMP t417))
MOVE(
 TEMP t418,
 TEMP t102)
CJUMP(EQ,
 CONST 0,
 TEMP t417,
 L271,L272)
LABEL L272
CJUMP(NE,
 CONST 0,
 MEM(
  BINOP(PLUS,
   TEMP t417,
   BINOP(MUL,
    CONST 0,
    CONST 4))),
 L273,L274)
LABEL L274
MOVE(
 TEMP t420,
 CONST 0)
LABEL L275
EXP(
 TEMP t420)
JUMP(
 NAME L355)
LABEL L271
Runtime Error: nil dereference check

JUMP(
 NAME L272)
LABEL L273
MOVE(
 TEMP t419,
 CALL(
  NAME allocRecord,
   CONST 2))
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t419,
   CONST 0)),
 TEMP t418)
MOVE(
 TEMP t452,
 BINOP(PLUS,
  TEMP t419,
  CONST 4))
MOVE(
 TEMP t102,
 CALL(
  NAME L267,
   MEM(
    BINOP(PLUS,
     CONST 0,
     TEMP t108))))
MOVE(
 MEM(
  TEMP t452),
 TEMP t102)
MOVE(
 TEMP t420,
 TEMP t419)
JUMP(
 NAME L275)
LABEL L355
New body:
LABEL L358
MOVE(
 TEMP t406,
 CONST 0)
MOVE(
 TEMP t102,
 CALL(
  NAME L237,
   TEMP t108))
EXP(
 TEMP t102)
CJUMP(EQ,
 CONST 0,
 TEMP t405,
 L258,L259)
LABEL L259
MOVE(
 TEMP t453,
 BINOP(PLUS,
  TEMP t405,
  BINOP(MUL,
   CONST 0,
   CONST 4)))
MOVE(
 TEMP t102,
 CALL(
  NAME L236,
   TEMP t108,
   MEM(
    BINOP(PLUS,
     MEM(
      BINOP(PLUS,
       CONST 0,
       TEMP t108)),
     CONST 0))))
MOVE(
 MEM(
  TEMP t453),
 TEMP t102)
LABEL L265
MOVE(
 TEMP t102,
 CALL(
  NAME L236,
   TEMP t108,
   MEM(
    BINOP(PLUS,
     MEM(
      BINOP(PLUS,
       CONST 0,
       TEMP t108)),
     CONST 0))))
CJUMP(NE,
 CONST 0,
 TEMP t102,
 L266,L260)
LABEL L260
EXP(
 TEMP t406)
JUMP(
 NAME L357)
LABEL L258
Runtime Error: nil dereference check

JUMP(
 NAME L259)
LABEL L266
MOVE(
 TEMP t454,
 BINOP(MUL,
  TEMP t406,
  CONST 10))
MOVE(
 TEMP t102,
 CALL(
  NAME L1,
   CONST 0,
   MEM(
    BINOP(PLUS,
     MEM(
      BINOP(PLUS,
       CONST 0,
       TEMP t108)),
     CONST 0))))
MOVE(
 TEMP t455,
 BINOP(PLUS,
  TEMP t454,
  TEMP t102))
MOVE(
 TEMP t102,
 CALL(
  NAME L1,
   CONST 0,
   NAME L262))
MOVE(
 TEMP t406,
 BINOP(MINUS,
  TEMP t455,
  TEMP t102))
MOVE(
 TEMP t456,
 BINOP(PLUS,
  MEM(
   BINOP(PLUS,
    CONST 0,
    TEMP t108)),
  CONST 0))
MOVE(
 TEMP t102,
 CALL(
  NAME L1,
   CONST 0))
MOVE(
 MEM(
  TEMP t456),
 TEMP t102)
JUMP(
 NAME L265)
LABEL L357
String:
L264: 0
String:
L263: 0
String:
L262: 0
String:
L261: 0
New body:
LABEL L256
MOVE(
 TEMP t457,
 CALL(
  NAME mystrcmp,
   MEM(
    BINOP(PLUS,
     MEM(
      BINOP(PLUS,
       CONST 0,
       MEM(
        BINOP(PLUS,
         CONST 0,
         TEMP t108)))),
     CONST 0)),
   NAME L246,
   CONST 0))
CJUMP(NE,
 CONST 0,
 TEMP t457,
 L248,L249)
LABEL L249
MOVE(
 TEMP t410,
 CALL(
  NAME mystrcmp,
   MEM(
    BINOP(PLUS,
     MEM(
      BINOP(PLUS,
       CONST 0,
       MEM(
        BINOP(PLUS,
         CONST 0,
         TEMP t108)))),
     CONST 0)),
   NAME L247,
   CONST 0))
LABEL L250
CJUMP(NE,
 CONST 0,
 TEMP t410,
 L257,L245)
LABEL L245
JUMP(
 NAME L359)
LABEL L248
MOVE(
 TEMP t410,
 CONST 1)
JUMP(
 NAME L250)
LABEL L257
MOVE(
 TEMP t458,
 BINOP(PLUS,
  MEM(
   BINOP(PLUS,
    CONST 0,
    MEM(
     BINOP(PLUS,
      CONST 0,
      TEMP t108)))),
  CONST 0))
MOVE(
 TEMP t102,
 CALL(
  NAME L1,
   CONST 0))
MOVE(
 MEM(
  TEMP t458),
 TEMP t102)
JUMP(
 NAME L256)
LABEL L359
String:
L252: 

String:
L251:  
String:
L247: 

String:
L246:  
New body:
LABEL L361
EXP(
 CONST 0)
JUMP(
 NAME L360)
LABEL L360
String:
L241: 9
String:
L240: 9
String:
L239: 0
String:
L238: 0
Going to step 2 :)
emit L0
L363:
addi    t462, $fp, 0
move    t459, t462
addi    $a0, $r0, 0
jal     L1
move    $rv, $rv
sw      $rv, 0(t459)
move    $a0, $fp
jal     L267
move    $rv, $rv
move    t436, $rv
addi    t463, $fp, 0
move    t460, t463
addi    $a0, $r0, 0
jal     L1
move    $rv, $rv
sw      $rv, 0(t460)
move    $a0, $fp
jal     L267
move    $rv, $rv
move    t437, $rv
move    t461, $fp
move    $a0, $fp
move    $a1, t436
move    $a2, t437
jal     L268
move    $rv, $rv
move    $a0, t461
move    $a1, $rv
jal     L270
move    $rv, $rv
j       L362
L362:
doing label L362
doing label L363
Printing Flow Graph
Node: L362:

 -> Successors:
 -> Predecessors:
   L363:
addi    t462, $fp, 0
move    t459, t462
addi    $a0, $r0, 0
jal     L1
move    $rv, $rv
sw      $rv, 0(t459)
move    $a0, $fp
jal     L267
move    $rv, $rv
move    t436, $rv
addi    t463, $fp, 0
move    t460, t463
addi    $a0, $r0, 0
jal     L1
move    $rv, $rv
sw      $rv, 0(t460)
move    $a0, $fp
jal     L267
move    $rv, $rv
move    t437, $rv
move    t461, $fp
move    $a0, $fp
move    $a1, t436
move    $a2, t437
jal     L268
move    $rv, $rv
move    $a0, t461
move    $a1, $rv
jal     L270
move    $rv, $rv
j       L362

Node: L363:
addi    t462, $fp, 0
move    t459, t462
addi    $a0, $r0, 0
jal     L1
move    $rv, $rv
sw      $rv, 0(t459)
move    $a0, $fp
jal     L267
move    $rv, $rv
move    t436, $rv
addi    t463, $fp, 0
move    t460, t463
addi    $a0, $r0, 0
jal     L1
move    $rv, $rv
sw      $rv, 0(t460)
move    $a0, $fp
jal     L267
move    $rv, $rv
move    t437, $rv
move    t461, $fp
move    $a0, $fp
move    $a1, t436
move    $a2, t437
jal     L268
move    $rv, $rv
move    $a0, t461
move    $a1, $rv
jal     L270
move    $rv, $rv
j       L362

 -> Successors:
   L362:

 -> Predecessors:
Frame L362
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L363
Defs: $rv, $ra, $a0, $a1, $a2, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t436, t437, t459, t460, t461, t462, t463, 
Uses: $r0, $fp, 
==================Printing Interference Graph==================
$rv => 
$ra => 
$a0 => 
$a1 => 
$a2 => 
$s0 => 
$s1 => 
$s2 => 
$s3 => 
$s4 => 
$s5 => 
$s6 => 
$s7 => 
t436 => 
t437 => 
t459 => 
t460 => 
t461 => 
t462 => 
t463 => 
emit L270
L365:
addi    t466, t434, 0
beqz    t466, L342
j       L343
L343:
lw      t467, 0($fp)
move    t464, t467
addi    t469, $r0, 0
sub     t468, t469, t434
beqz    t468, L334
j       L335
L335:
move    $a0, t464
addi    t473, $r0, 0
addi    t474, $r0, 4
mul     t472, t473, t474
add     t471, t434, t472
lw      t470, 0(t471)
move    $a1, t470
jal     L269
move    $rv, $rv
addi    $a0, $r0, 0
la      t475, L337
move    $a1, t475
jal     L1
move    $rv, $rv
lw      t476, 0($fp)
move    t465, t476
addi    t478, $r0, 0
sub     t477, t478, t434
beqz    t477, L340
j       L341
L341:
move    $a0, t465
addi    t482, $r0, 1
addi    t483, $r0, 4
mul     t481, t482, t483
add     t480, t434, t481
lw      t479, 0(t480)
move    $a1, t479
jal     L270
move    $rv, $rv
move    t435, $rv
L344:
j       L364
L342:
addi    $a0, $r0, 0
la      t484, L331
move    $a1, t484
jal     L1
move    $rv, $rv
move    t435, $rv
j       L344
L334:
addi    $rv, $r0, 10
syscall
j       L335
L340:
addi    $rv, $r0, 10
syscall
j       L341
L364:
doing label L334
doing label L335
doing label L340
doing label L341
../tests/merge.tig0.0:Internal failure: Last instr not jump.
doing label L342
doing label L343
doing label L344
doing label L364
doing label L365
Printing Flow Graph
Node: L334:
addi    $rv, $r0, 10
syscall
j       L335

 -> Successors:
 -> Predecessors:
   L343:
lw      t467, 0($fp)
move    t464, t467
addi    t469, $r0, 0
sub     t468, t469, t434
beqz    t468, L334
j       L335

Node: L335:
move    $a0, t464
addi    t473, $r0, 0
addi    t474, $r0, 4
mul     t472, t473, t474
add     t471, t434, t472
lw      t470, 0(t471)
move    $a1, t470
jal     L269
move    $rv, $rv
addi    $a0, $r0, 0
la      t475, L337
move    $a1, t475
jal     L1
move    $rv, $rv
lw      t476, 0($fp)
move    t465, t476
addi    t478, $r0, 0
sub     t477, t478, t434
beqz    t477, L340
j       L341

 -> Successors:
 -> Predecessors:
   L343:
lw      t467, 0($fp)
move    t464, t467
addi    t469, $r0, 0
sub     t468, t469, t434
beqz    t468, L334
j       L335

Node: L340:
addi    $rv, $r0, 10
syscall
j       L341

 -> Successors:
 -> Predecessors:
Node: L341:
move    $a0, t465
addi    t482, $r0, 1
addi    t483, $r0, 4
mul     t481, t482, t483
add     t480, t434, t481
lw      t479, 0(t480)
move    $a1, t479
jal     L270
move    $rv, $rv
move    t435, $rv

 -> Successors:
 -> Predecessors:
Node: L342:
addi    $a0, $r0, 0
la      t484, L331
move    $a1, t484
jal     L1
move    $rv, $rv
move    t435, $rv
j       L344

 -> Successors:
   L344:
j       L364

 -> Predecessors:
   L365:
addi    t466, t434, 0
beqz    t466, L342
j       L343

Node: L343:
lw      t467, 0($fp)
move    t464, t467
addi    t469, $r0, 0
sub     t468, t469, t434
beqz    t468, L334
j       L335

 -> Successors:
   L334:
addi    $rv, $r0, 10
syscall
j       L335

   L335:
move    $a0, t464
addi    t473, $r0, 0
addi    t474, $r0, 4
mul     t472, t473, t474
add     t471, t434, t472
lw      t470, 0(t471)
move    $a1, t470
jal     L269
move    $rv, $rv
addi    $a0, $r0, 0
la      t475, L337
move    $a1, t475
jal     L1
move    $rv, $rv
lw      t476, 0($fp)
move    t465, t476
addi    t478, $r0, 0
sub     t477, t478, t434
beqz    t477, L340
j       L341

 -> Predecessors:
   L365:
addi    t466, t434, 0
beqz    t466, L342
j       L343

Node: L344:
j       L364

 -> Successors:
   L364:

 -> Predecessors:
   L342:
addi    $a0, $r0, 0
la      t484, L331
move    $a1, t484
jal     L1
move    $rv, $rv
move    t435, $rv
j       L344

Node: L364:

 -> Successors:
 -> Predecessors:
   L344:
j       L364

Node: L365:
addi    t466, t434, 0
beqz    t466, L342
j       L343

 -> Successors:
   L342:
addi    $a0, $r0, 0
la      t484, L331
move    $a1, t484
jal     L1
move    $rv, $rv
move    t435, $rv
j       L344

   L343:
lw      t467, 0($fp)
move    t464, t467
addi    t469, $r0, 0
sub     t468, t469, t434
beqz    t468, L334
j       L335

 -> Predecessors:
Frame L334
Defs: $rv, 
Uses: $r0, 
Frame L335
Defs: $rv, $ra, $a0, $a1, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t465, t470, t471, t472, t473, t474, t475, t476, t477, t478, 
Uses: $r0, $fp, t434, t464, 
Frame L340
Defs: $rv, 
Uses: $r0, 
Frame L341
Defs: $rv, $ra, $a0, $a1, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t435, t479, t480, t481, t482, t483, 
Uses: $r0, t434, t465, 
Frame L342
Defs: $rv, $ra, $a0, $a1, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t435, t484, 
Uses: $r0, 
Frame L343
Defs: t464, t467, t468, t469, 
Uses: $r0, $fp, t434, 
Frame L344
Defs: 
Uses: 
Frame L364
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L365
Defs: t466, 
Uses: t434, 
==================Printing Interference Graph==================
$rv => 
$ra => 
$a0 => 
$a1 => 
$s0 => 
$s1 => 
$s2 => 
$s3 => 
$s4 => 
$s5 => 
$s6 => 
$s7 => 
t435 => 
t464 => 
t465 => 
t466 => 
t467 => 
t468 => 
t469 => 
t470 => 
t471 => 
t472 => 
t473 => 
t474 => 
t475 => 
t476 => 
t477 => 
t478 => 
t479 => 
t480 => 
t481 => 
t482 => 
t483 => 
t484 => 
L337:  
L336:  
L331: 

L330: 

emit L269
L367:
addi    t485, t428, 0
bltz    t485, L327
j       L328
L328:
addi    t486, t428, 0
bgtz    t486, L324
j       L325
L325:
addi    $a0, $r0, 0
la      t487, L323
move    $a1, t487
jal     L1
move    $rv, $rv
move    t432, $rv
L326:
move    t433, t432
L329:
j       L366
L327:
addi    $a0, $r0, 0
la      t488, L321
move    $a1, t488
jal     L1
move    $rv, $rv
move    $a0, $fp
addi    t490, $r0, 0
sub     t489, t490, t428
move    $a1, t489
jal     L301
move    $rv, $rv
move    t433, $rv
j       L329
L324:
move    $a0, $fp
move    $a1, t428
jal     L301
move    $rv, $rv
move    t432, $rv
j       L326
L366:
doing label L324
doing label L325
../tests/merge.tig0.0:Internal failure: Last instr not jump.
doing label L326
../tests/merge.tig0.0:Internal failure: Last instr not jump.
doing label L327
doing label L328
doing label L329
doing label L366
doing label L367
Printing Flow Graph
Node: L324:
move    $a0, $fp
move    $a1, t428
jal     L301
move    $rv, $rv
move    t432, $rv
j       L326

 -> Successors:
 -> Predecessors:
   L328:
addi    t486, t428, 0
bgtz    t486, L324
j       L325

Node: L325:
addi    $a0, $r0, 0
la      t487, L323
move    $a1, t487
jal     L1
move    $rv, $rv
move    t432, $rv

 -> Successors:
 -> Predecessors:
   L328:
addi    t486, t428, 0
bgtz    t486, L324
j       L325

Node: L326:
move    t433, t432

 -> Successors:
 -> Predecessors:
Node: L327:
addi    $a0, $r0, 0
la      t488, L321
move    $a1, t488
jal     L1
move    $rv, $rv
move    $a0, $fp
addi    t490, $r0, 0
sub     t489, t490, t428
move    $a1, t489
jal     L301
move    $rv, $rv
move    t433, $rv
j       L329

 -> Successors:
   L329:
j       L366

 -> Predecessors:
   L367:
addi    t485, t428, 0
bltz    t485, L327
j       L328

Node: L328:
addi    t486, t428, 0
bgtz    t486, L324
j       L325

 -> Successors:
   L324:
move    $a0, $fp
move    $a1, t428
jal     L301
move    $rv, $rv
move    t432, $rv
j       L326

   L325:
addi    $a0, $r0, 0
la      t487, L323
move    $a1, t487
jal     L1
move    $rv, $rv
move    t432, $rv

 -> Predecessors:
   L367:
addi    t485, t428, 0
bltz    t485, L327
j       L328

Node: L329:
j       L366

 -> Successors:
   L366:

 -> Predecessors:
   L327:
addi    $a0, $r0, 0
la      t488, L321
move    $a1, t488
jal     L1
move    $rv, $rv
move    $a0, $fp
addi    t490, $r0, 0
sub     t489, t490, t428
move    $a1, t489
jal     L301
move    $rv, $rv
move    t433, $rv
j       L329

Node: L366:

 -> Successors:
 -> Predecessors:
   L329:
j       L366

Node: L367:
addi    t485, t428, 0
bltz    t485, L327
j       L328

 -> Successors:
   L327:
addi    $a0, $r0, 0
la      t488, L321
move    $a1, t488
jal     L1
move    $rv, $rv
move    $a0, $fp
addi    t490, $r0, 0
sub     t489, t490, t428
move    $a1, t489
jal     L301
move    $rv, $rv
move    t433, $rv
j       L329

   L328:
addi    t486, t428, 0
bgtz    t486, L324
j       L325

 -> Predecessors:
Frame L324
Defs: $rv, $ra, $a0, $a1, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t432, 
Uses: $fp, t428, 
Frame L325
Defs: $rv, $ra, $a0, $a1, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t432, t487, 
Uses: $r0, 
Frame L326
Defs: t433, 
Uses: t432, 
Frame L327
Defs: $rv, $ra, $a0, $a1, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t433, t488, t489, t490, 
Uses: $r0, $fp, t428, 
Frame L328
Defs: t486, 
Uses: t428, 
Frame L329
Defs: 
Uses: 
Frame L366
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L367
Defs: t485, 
Uses: t428, 
==================Printing Interference Graph==================
$rv => 
$ra => 
$a0 => 
$a1 => 
$s0 => 
$s1 => 
$s2 => 
$s3 => 
$s4 => 
$s5 => 
$s6 => 
$s7 => 
t432 => 
t433 => 
t485 => 
t486 => 
t487 => 
t488 => 
t489 => 
t490 => 
L323: 0
L322: 0
L321: -
L320: -
emit L301
L369:
addi    t492, t430, 0
bgtz    t492, L319
j       L318
L318:
j       L368
L319:
lw      t493, 0($fp)
move    $a0, t493
addi    t495, $r0, 10
div     t494, t430, t495
move    $a1, t494
jal     L301
move    $rv, $rv
addi    t499, $r0, 10
div     t498, t430, t499
addi    t500, $r0, 10
mul     t497, t498, t500
sub     t496, t430, t497
move    t491, t496
addi    $a0, $r0, 0
la      t501, L317
move    $a1, t501
jal     L1
move    $rv, $rv
addi    $a0, $r0, 0
add     t502, t491, $rv
move    $a1, t502
jal     L1
move    $rv, $rv
addi    $a0, $r0, 0
move    $a1, $rv
jal     L1
move    $rv, $rv
move    t431, $rv
j       L318
L368:
doing label L318
doing label L319
doing label L368
doing label L369
Printing Flow Graph
Node: L318:
j       L368

 -> Successors:
   L368:

 -> Predecessors:
   L319:
lw      t493, 0($fp)
move    $a0, t493
addi    t495, $r0, 10
div     t494, t430, t495
move    $a1, t494
jal     L301
move    $rv, $rv
addi    t499, $r0, 10
div     t498, t430, t499
addi    t500, $r0, 10
mul     t497, t498, t500
sub     t496, t430, t497
move    t491, t496
addi    $a0, $r0, 0
la      t501, L317
move    $a1, t501
jal     L1
move    $rv, $rv
addi    $a0, $r0, 0
add     t502, t491, $rv
move    $a1, t502
jal     L1
move    $rv, $rv
addi    $a0, $r0, 0
move    $a1, $rv
jal     L1
move    $rv, $rv
move    t431, $rv
j       L318

   L369:
addi    t492, t430, 0
bgtz    t492, L319
j       L318

Node: L319:
lw      t493, 0($fp)
move    $a0, t493
addi    t495, $r0, 10
div     t494, t430, t495
move    $a1, t494
jal     L301
move    $rv, $rv
addi    t499, $r0, 10
div     t498, t430, t499
addi    t500, $r0, 10
mul     t497, t498, t500
sub     t496, t430, t497
move    t491, t496
addi    $a0, $r0, 0
la      t501, L317
move    $a1, t501
jal     L1
move    $rv, $rv
addi    $a0, $r0, 0
add     t502, t491, $rv
move    $a1, t502
jal     L1
move    $rv, $rv
addi    $a0, $r0, 0
move    $a1, $rv
jal     L1
move    $rv, $rv
move    t431, $rv
j       L318

 -> Successors:
   L318:
j       L368

 -> Predecessors:
   L369:
addi    t492, t430, 0
bgtz    t492, L319
j       L318

Node: L368:

 -> Successors:
 -> Predecessors:
   L318:
j       L368

Node: L369:
addi    t492, t430, 0
bgtz    t492, L319
j       L318

 -> Successors:
   L318:
j       L368

   L319:
lw      t493, 0($fp)
move    $a0, t493
addi    t495, $r0, 10
div     t494, t430, t495
move    $a1, t494
jal     L301
move    $rv, $rv
addi    t499, $r0, 10
div     t498, t430, t499
addi    t500, $r0, 10
mul     t497, t498, t500
sub     t496, t430, t497
move    t491, t496
addi    $a0, $r0, 0
la      t501, L317
move    $a1, t501
jal     L1
move    $rv, $rv
addi    $a0, $r0, 0
add     t502, t491, $rv
move    $a1, t502
jal     L1
move    $rv, $rv
addi    $a0, $r0, 0
move    $a1, $rv
jal     L1
move    $rv, $rv
move    t431, $rv
j       L318

 -> Predecessors:
Frame L318
Defs: 
Uses: 
Frame L319
Defs: $rv, $ra, $a0, $a1, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t431, t491, t493, t494, t495, t496, t497, t498, t499, t500, t501, t502, 
Uses: $r0, $fp, t430, 
Frame L368
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L369
Defs: t492, 
Uses: t430, 
==================Printing Interference Graph==================
$rv => 
$ra => 
$a0 => 
$a1 => 
$s0 => 
$s1 => 
$s2 => 
$s3 => 
$s4 => 
$s5 => 
$s6 => 
$s7 => 
t431 => 
t491 => 
t492 => 
t493 => 
t494 => 
t495 => 
t496 => 
t497 => 
t498 => 
t499 => 
t500 => 
t501 => 
t502 => 
L317: 0
L316: 0
L315: 0
L314: 0
L313: 0
L312: 0
L311: 0
L310: 0
L309: 0
L308: 0
L307: 0
L306: 0
L305: 0
L304: 0
L303: 0
L302: 0
emit L268
L371:
addi    t511, t421, 0
beqz    t511, L298
j       L299
L299:
addi    t512, t422, 0
beqz    t512, L295
j       L296
L296:
addi    t514, $r0, 0
sub     t513, t514, t421
beqz    t513, L276
j       L277
L277:
addi    t518, $r0, 0
addi    t519, $r0, 4
mul     t517, t518, t519
add     t516, t421, t517
lw      t515, 0(t516)
move    t503, t515
addi    t521, $r0, 0
sub     t520, t521, t422
beqz    t520, L278
j       L279
L279:
addi    t526, $r0, 0
addi    t527, $r0, 4
mul     t525, t526, t527
add     t524, t422, t525
lw      t523, 0(t524)
sub     t522, t503, t523
bltz    t522, L292
j       L293
L293:
addi    $a0, $r0, 2
jal     allocRecord
move    t424, $rv
addi    t528, t424, 0
move    t507, t528
addi    t530, $r0, 0
sub     t529, t530, t422
beqz    t529, L286
j       L287
L287:
addi    t533, $r0, 0
addi    t534, $r0, 4
mul     t532, t533, t534
add     t531, t422, t532
sw      t531, 0(t507)
addi    t535, t424, 4
move    t510, t535
lw      t536, 0($fp)
move    t509, t536
move    t508, t421
addi    t538, $r0, 0
sub     t537, t538, t422
beqz    t537, L290
j       L291
L291:
move    $a0, t509
move    $a1, t508
addi    t542, $r0, 1
addi    t543, $r0, 4
mul     t541, t542, t543
add     t540, t422, t541
lw      t539, 0(t540)
move    $a2, t539
jal     L268
move    $rv, $rv
sw      $rv, 0(t510)
move    t425, t424
L294:
move    t426, t425
L297:
move    t427, t426
L300:
j       L370
L298:
move    t427, t422
j       L300
L295:
move    t426, t421
j       L297
L276:
addi    $rv, $r0, 10
syscall
j       L277
L278:
addi    $rv, $r0, 10
syscall
j       L279
L292:
addi    $a0, $r0, 2
jal     allocRecord
move    t423, $rv
addi    t544, t423, 0
move    t504, t544
addi    t546, $r0, 0
sub     t545, t546, t421
beqz    t545, L280
j       L281
L281:
addi    t549, $r0, 0
addi    t550, $r0, 4
mul     t548, t549, t550
add     t547, t421, t548
sw      t547, 0(t504)
addi    t551, t423, 4
move    t506, t551
lw      t552, 0($fp)
move    t505, t552
addi    t554, $r0, 0
sub     t553, t554, t421
beqz    t553, L284
j       L285
L285:
move    $a0, t505
addi    t558, $r0, 1
addi    t559, $r0, 4
mul     t557, t558, t559
add     t556, t421, t557
lw      t555, 0(t556)
move    $a1, t555
move    $a2, t422
jal     L268
move    $rv, $rv
sw      $rv, 0(t506)
move    t425, t423
j       L294
L280:
addi    $rv, $r0, 10
syscall
j       L281
L284:
addi    $rv, $r0, 10
syscall
j       L285
L286:
addi    $rv, $r0, 10
syscall
j       L287
L290:
addi    $rv, $r0, 10
syscall
j       L291
L370:
doing label L276
doing label L277
doing label L278
doing label L279
doing label L280
doing label L281
doing label L284
doing label L285
doing label L286
doing label L287
doing label L290
doing label L291
../tests/merge.tig0.0:Internal failure: Last instr not jump.
doing label L292
doing label L293
doing label L294
../tests/merge.tig0.0:Internal failure: Last instr not jump.
doing label L295
doing label L296
doing label L297
../tests/merge.tig0.0:Internal failure: Last instr not jump.
doing label L298
doing label L299
doing label L300
doing label L370
doing label L371
Printing Flow Graph
Node: L276:
addi    $rv, $r0, 10
syscall
j       L277

 -> Successors:
 -> Predecessors:
Node: L277:
addi    t518, $r0, 0
addi    t519, $r0, 4
mul     t517, t518, t519
add     t516, t421, t517
lw      t515, 0(t516)
move    t503, t515
addi    t521, $r0, 0
sub     t520, t521, t422
beqz    t520, L278
j       L279

 -> Successors:
 -> Predecessors:
Node: L278:
addi    $rv, $r0, 10
syscall
j       L279

 -> Successors:
 -> Predecessors:
Node: L279:
addi    t526, $r0, 0
addi    t527, $r0, 4
mul     t525, t526, t527
add     t524, t422, t525
lw      t523, 0(t524)
sub     t522, t503, t523
bltz    t522, L292
j       L293

 -> Successors:
 -> Predecessors:
Node: L280:
addi    $rv, $r0, 10
syscall
j       L281

 -> Successors:
 -> Predecessors:
Node: L281:
addi    t549, $r0, 0
addi    t550, $r0, 4
mul     t548, t549, t550
add     t547, t421, t548
sw      t547, 0(t504)
addi    t551, t423, 4
move    t506, t551
lw      t552, 0($fp)
move    t505, t552
addi    t554, $r0, 0
sub     t553, t554, t421
beqz    t553, L284
j       L285

 -> Successors:
 -> Predecessors:
Node: L284:
addi    $rv, $r0, 10
syscall
j       L285

 -> Successors:
 -> Predecessors:
Node: L285:
move    $a0, t505
addi    t558, $r0, 1
addi    t559, $r0, 4
mul     t557, t558, t559
add     t556, t421, t557
lw      t555, 0(t556)
move    $a1, t555
move    $a2, t422
jal     L268
move    $rv, $rv
sw      $rv, 0(t506)
move    t425, t423
j       L294

 -> Successors:
 -> Predecessors:
Node: L286:
addi    $rv, $r0, 10
syscall
j       L287

 -> Successors:
 -> Predecessors:
Node: L287:
addi    t533, $r0, 0
addi    t534, $r0, 4
mul     t532, t533, t534
add     t531, t422, t532
sw      t531, 0(t507)
addi    t535, t424, 4
move    t510, t535
lw      t536, 0($fp)
move    t509, t536
move    t508, t421
addi    t538, $r0, 0
sub     t537, t538, t422
beqz    t537, L290
j       L291

 -> Successors:
 -> Predecessors:
Node: L290:
addi    $rv, $r0, 10
syscall
j       L291

 -> Successors:
 -> Predecessors:
Node: L291:
move    $a0, t509
move    $a1, t508
addi    t542, $r0, 1
addi    t543, $r0, 4
mul     t541, t542, t543
add     t540, t422, t541
lw      t539, 0(t540)
move    $a2, t539
jal     L268
move    $rv, $rv
sw      $rv, 0(t510)
move    t425, t424

 -> Successors:
 -> Predecessors:
Node: L292:
addi    $a0, $r0, 2
jal     allocRecord
move    t423, $rv
addi    t544, t423, 0
move    t504, t544
addi    t546, $r0, 0
sub     t545, t546, t421
beqz    t545, L280
j       L281

 -> Successors:
 -> Predecessors:
Node: L293:
addi    $a0, $r0, 2
jal     allocRecord
move    t424, $rv
addi    t528, t424, 0
move    t507, t528
addi    t530, $r0, 0
sub     t529, t530, t422
beqz    t529, L286
j       L287

 -> Successors:
 -> Predecessors:
Node: L294:
move    t426, t425

 -> Successors:
 -> Predecessors:
Node: L295:
move    t426, t421
j       L297

 -> Successors:
 -> Predecessors:
   L299:
addi    t512, t422, 0
beqz    t512, L295
j       L296

Node: L296:
addi    t514, $r0, 0
sub     t513, t514, t421
beqz    t513, L276
j       L277

 -> Successors:
 -> Predecessors:
   L299:
addi    t512, t422, 0
beqz    t512, L295
j       L296

Node: L297:
move    t427, t426

 -> Successors:
 -> Predecessors:
Node: L298:
move    t427, t422
j       L300

 -> Successors:
   L300:
j       L370

 -> Predecessors:
   L371:
addi    t511, t421, 0
beqz    t511, L298
j       L299

Node: L299:
addi    t512, t422, 0
beqz    t512, L295
j       L296

 -> Successors:
   L295:
move    t426, t421
j       L297

   L296:
addi    t514, $r0, 0
sub     t513, t514, t421
beqz    t513, L276
j       L277

 -> Predecessors:
   L371:
addi    t511, t421, 0
beqz    t511, L298
j       L299

Node: L300:
j       L370

 -> Successors:
   L370:

 -> Predecessors:
   L298:
move    t427, t422
j       L300

Node: L370:

 -> Successors:
 -> Predecessors:
   L300:
j       L370

Node: L371:
addi    t511, t421, 0
beqz    t511, L298
j       L299

 -> Successors:
   L298:
move    t427, t422
j       L300

   L299:
addi    t512, t422, 0
beqz    t512, L295
j       L296

 -> Predecessors:
Frame L276
Defs: $rv, 
Uses: $r0, 
Frame L277
Defs: t503, t515, t516, t517, t518, t519, t520, t521, 
Uses: $r0, t421, t422, 
Frame L278
Defs: $rv, 
Uses: $r0, 
Frame L279
Defs: t522, t523, t524, t525, t526, t527, 
Uses: $r0, t422, t503, 
Frame L280
Defs: $rv, 
Uses: $r0, 
Frame L281
Defs: t505, t506, t547, t548, t549, t550, t551, t552, t553, t554, 
Uses: $r0, $fp, t421, t423, t504, 
Frame L284
Defs: $rv, 
Uses: $r0, 
Frame L285
Defs: $rv, $ra, $a0, $a1, $a2, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t425, t555, t556, t557, t558, t559, 
Uses: $r0, t421, t422, t423, t505, t506, 
Frame L286
Defs: $rv, 
Uses: $r0, 
Frame L287
Defs: t508, t509, t510, t531, t532, t533, t534, t535, t536, t537, t538, 
Uses: $r0, $fp, t421, t422, t424, t507, 
Frame L290
Defs: $rv, 
Uses: $r0, 
Frame L291
Defs: $rv, $ra, $a0, $a1, $a2, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t425, t539, t540, t541, t542, t543, 
Uses: $r0, t422, t424, t508, t509, t510, 
Frame L292
Defs: $rv, $ra, $a0, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t423, t504, t544, t545, t546, 
Uses: $r0, t421, 
Frame L293
Defs: $rv, $ra, $a0, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t424, t507, t528, t529, t530, 
Uses: $r0, t422, 
Frame L294
Defs: t426, 
Uses: t425, 
Frame L295
Defs: t426, 
Uses: t421, 
Frame L296
Defs: t513, t514, 
Uses: $r0, t421, 
Frame L297
Defs: t427, 
Uses: t426, 
Frame L298
Defs: t427, 
Uses: t422, 
Frame L299
Defs: t512, 
Uses: t422, 
Frame L300
Defs: 
Uses: 
Frame L370
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L371
Defs: t511, 
Uses: t421, 
==================Printing Interference Graph==================
$rv => 
$ra => 
$a0 => 
$a1 => 
$a2 => 
$s0 => 
$s1 => 
$s2 => 
$s3 => 
$s4 => 
$s5 => 
$s6 => 
$s7 => 
t423 => 
t424 => 
t425 => 
t426 => 
t427 => 
t503 => 
t504 => 
t505 => 
t506 => 
t507 => 
t508 => 
t509 => 
t510 => 
t511 => 
t512 => 
t513 => 
t514 => 
t515 => 
t516 => 
t517 => 
t518 => 
t519 => 
t520 => 
t521 => 
t522 => 
t523 => 
t524 => 
t525 => 
t526 => 
t527 => 
t528 => 
t529 => 
t530 => 
t531 => 
t532 => 
t533 => 
t534 => 
t535 => 
t536 => 
t537 => 
t538 => 
t539 => 
t540 => 
t541 => 
t542 => 
t543 => 
t544 => 
t545 => 
t546 => 
t547 => 
t548 => 
t549 => 
t550 => 
t551 => 
t552 => 
t553 => 
t554 => 
t555 => 
t556 => 
t557 => 
t558 => 
t559 => 
emit L267
L373:
addi    $a0, $r0, 1
jal     allocRecord
move    t416, $rv
addi    t561, $r0, 0
sw      t561, 0(t416)
move    t417, t416
lw      t562, 0($fp)
move    $a0, t562
move    $a1, t417
jal     L235
move    $rv, $rv
move    t418, $rv
addi    t564, $r0, 0
sub     t563, t564, t417
beqz    t563, L271
j       L272
L272:
addi    t566, $r0, 0
addi    t570, $r0, 0
addi    t571, $r0, 4
mul     t569, t570, t571
add     t568, t417, t569
lw      t567, 0(t568)
sub     t565, t566, t567
bnez    t565, L273
j       L274
L274:
addi    t420, $r0, 0
L275:
j       L372
L271:
addi    $rv, $r0, 10
syscall
j       L272
L273:
addi    $a0, $r0, 2
jal     allocRecord
move    t419, $rv
sw      t418, 0(t419)
addi    t572, t419, 4
move    t560, t572
lw      t573, 0($fp)
move    $a0, t573
jal     L267
move    $rv, $rv
sw      $rv, 0(t560)
move    t420, t419
j       L275
L372:
doing label L271
doing label L272
doing label L273
doing label L274
../tests/merge.tig0.0:Internal failure: Last instr not jump.
doing label L275
doing label L372
doing label L373
Printing Flow Graph
Node: L271:
addi    $rv, $r0, 10
syscall
j       L272

 -> Successors:
 -> Predecessors:
   L373:
addi    $a0, $r0, 1
jal     allocRecord
move    t416, $rv
addi    t561, $r0, 0
sw      t561, 0(t416)
move    t417, t416
lw      t562, 0($fp)
move    $a0, t562
move    $a1, t417
jal     L235
move    $rv, $rv
move    t418, $rv
addi    t564, $r0, 0
sub     t563, t564, t417
beqz    t563, L271
j       L272

Node: L272:
addi    t566, $r0, 0
addi    t570, $r0, 0
addi    t571, $r0, 4
mul     t569, t570, t571
add     t568, t417, t569
lw      t567, 0(t568)
sub     t565, t566, t567
bnez    t565, L273
j       L274

 -> Successors:
 -> Predecessors:
   L373:
addi    $a0, $r0, 1
jal     allocRecord
move    t416, $rv
addi    t561, $r0, 0
sw      t561, 0(t416)
move    t417, t416
lw      t562, 0($fp)
move    $a0, t562
move    $a1, t417
jal     L235
move    $rv, $rv
move    t418, $rv
addi    t564, $r0, 0
sub     t563, t564, t417
beqz    t563, L271
j       L272

Node: L273:
addi    $a0, $r0, 2
jal     allocRecord
move    t419, $rv
sw      t418, 0(t419)
addi    t572, t419, 4
move    t560, t572
lw      t573, 0($fp)
move    $a0, t573
jal     L267
move    $rv, $rv
sw      $rv, 0(t560)
move    t420, t419
j       L275

 -> Successors:
 -> Predecessors:
Node: L274:
addi    t420, $r0, 0

 -> Successors:
 -> Predecessors:
Node: L275:
j       L372

 -> Successors:
   L372:

 -> Predecessors:
Node: L372:

 -> Successors:
 -> Predecessors:
   L275:
j       L372

Node: L373:
addi    $a0, $r0, 1
jal     allocRecord
move    t416, $rv
addi    t561, $r0, 0
sw      t561, 0(t416)
move    t417, t416
lw      t562, 0($fp)
move    $a0, t562
move    $a1, t417
jal     L235
move    $rv, $rv
move    t418, $rv
addi    t564, $r0, 0
sub     t563, t564, t417
beqz    t563, L271
j       L272

 -> Successors:
   L271:
addi    $rv, $r0, 10
syscall
j       L272

   L272:
addi    t566, $r0, 0
addi    t570, $r0, 0
addi    t571, $r0, 4
mul     t569, t570, t571
add     t568, t417, t569
lw      t567, 0(t568)
sub     t565, t566, t567
bnez    t565, L273
j       L274

 -> Predecessors:
Frame L271
Defs: $rv, 
Uses: $r0, 
Frame L272
Defs: t565, t566, t567, t568, t569, t570, t571, 
Uses: $r0, t417, 
Frame L273
Defs: $rv, $ra, $a0, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t419, t420, t560, t572, t573, 
Uses: $r0, $fp, t418, 
Frame L274
Defs: t420, 
Uses: $r0, 
Frame L275
Defs: 
Uses: 
Frame L372
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L373
Defs: $rv, $ra, $a0, $a1, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t416, t417, t418, t561, t562, t563, t564, 
Uses: $r0, $fp, 
==================Printing Interference Graph==================
$rv => 
$ra => 
$a0 => 
$a1 => 
$s0 => 
$s1 => 
$s2 => 
$s3 => 
$s4 => 
$s5 => 
$s6 => 
$s7 => 
t416 => 
t417 => 
t418 => 
t419 => 
t420 => 
t560 => 
t561 => 
t562 => 
t563 => 
t564 => 
t565 => 
t566 => 
t567 => 
t568 => 
t569 => 
t570 => 
t571 => 
t572 => 
t573 => 
emit L235
L375:
addi    t406, $r0, 0
move    $a0, $fp
jal     L237
move    $rv, $rv
addi    t579, $r0, 0
sub     t578, t579, t405
beqz    t578, L258
j       L259
L259:
addi    t582, $r0, 0
addi    t583, $r0, 4
mul     t581, t582, t583
add     t580, t405, t581
move    t574, t580
move    $a0, $fp
lw      t585, 0($fp)
lw      t584, 0(t585)
move    $a1, t584
jal     L236
move    $rv, $rv
sw      $rv, 0(t574)
L265:
move    $a0, $fp
lw      t587, 0($fp)
lw      t586, 0(t587)
move    $a1, t586
jal     L236
move    $rv, $rv
addi    t589, $r0, 0
sub     t588, t589, $rv
bnez    t588, L266
j       L260
L260:
j       L374
L258:
addi    $rv, $r0, 10
syscall
j       L259
L266:
addi    t591, $r0, 10
mul     t590, t406, t591
move    t575, t590
addi    $a0, $r0, 0
lw      t593, 0($fp)
lw      t592, 0(t593)
move    $a1, t592
jal     L1
move    $rv, $rv
add     t594, t575, $rv
move    t576, t594
addi    $a0, $r0, 0
la      t595, L262
move    $a1, t595
jal     L1
move    $rv, $rv
sub     t596, t576, $rv
move    t406, t596
lw      t598, 0($fp)
addi    t597, t598, 0
move    t577, t597
addi    $a0, $r0, 0
jal     L1
move    $rv, $rv
sw      $rv, 0(t577)
j       L265
L374:
doing label L258
doing label L259
../tests/merge.tig0.0:Internal failure: Last instr not jump.
doing label L260
doing label L265
doing label L266
doing label L374
doing label L375
Printing Flow Graph
Node: L258:
addi    $rv, $r0, 10
syscall
j       L259

 -> Successors:
 -> Predecessors:
   L375:
addi    t406, $r0, 0
move    $a0, $fp
jal     L237
move    $rv, $rv
addi    t579, $r0, 0
sub     t578, t579, t405
beqz    t578, L258
j       L259

Node: L259:
addi    t582, $r0, 0
addi    t583, $r0, 4
mul     t581, t582, t583
add     t580, t405, t581
move    t574, t580
move    $a0, $fp
lw      t585, 0($fp)
lw      t584, 0(t585)
move    $a1, t584
jal     L236
move    $rv, $rv
sw      $rv, 0(t574)

 -> Successors:
 -> Predecessors:
   L375:
addi    t406, $r0, 0
move    $a0, $fp
jal     L237
move    $rv, $rv
addi    t579, $r0, 0
sub     t578, t579, t405
beqz    t578, L258
j       L259

Node: L260:
j       L374

 -> Successors:
   L374:

 -> Predecessors:
   L265:
move    $a0, $fp
lw      t587, 0($fp)
lw      t586, 0(t587)
move    $a1, t586
jal     L236
move    $rv, $rv
addi    t589, $r0, 0
sub     t588, t589, $rv
bnez    t588, L266
j       L260

Node: L265:
move    $a0, $fp
lw      t587, 0($fp)
lw      t586, 0(t587)
move    $a1, t586
jal     L236
move    $rv, $rv
addi    t589, $r0, 0
sub     t588, t589, $rv
bnez    t588, L266
j       L260

 -> Successors:
   L260:
j       L374

   L266:
addi    t591, $r0, 10
mul     t590, t406, t591
move    t575, t590
addi    $a0, $r0, 0
lw      t593, 0($fp)
lw      t592, 0(t593)
move    $a1, t592
jal     L1
move    $rv, $rv
add     t594, t575, $rv
move    t576, t594
addi    $a0, $r0, 0
la      t595, L262
move    $a1, t595
jal     L1
move    $rv, $rv
sub     t596, t576, $rv
move    t406, t596
lw      t598, 0($fp)
addi    t597, t598, 0
move    t577, t597
addi    $a0, $r0, 0
jal     L1
move    $rv, $rv
sw      $rv, 0(t577)
j       L265

 -> Predecessors:
   L266:
addi    t591, $r0, 10
mul     t590, t406, t591
move    t575, t590
addi    $a0, $r0, 0
lw      t593, 0($fp)
lw      t592, 0(t593)
move    $a1, t592
jal     L1
move    $rv, $rv
add     t594, t575, $rv
move    t576, t594
addi    $a0, $r0, 0
la      t595, L262
move    $a1, t595
jal     L1
move    $rv, $rv
sub     t596, t576, $rv
move    t406, t596
lw      t598, 0($fp)
addi    t597, t598, 0
move    t577, t597
addi    $a0, $r0, 0
jal     L1
move    $rv, $rv
sw      $rv, 0(t577)
j       L265

Node: L266:
addi    t591, $r0, 10
mul     t590, t406, t591
move    t575, t590
addi    $a0, $r0, 0
lw      t593, 0($fp)
lw      t592, 0(t593)
move    $a1, t592
jal     L1
move    $rv, $rv
add     t594, t575, $rv
move    t576, t594
addi    $a0, $r0, 0
la      t595, L262
move    $a1, t595
jal     L1
move    $rv, $rv
sub     t596, t576, $rv
move    t406, t596
lw      t598, 0($fp)
addi    t597, t598, 0
move    t577, t597
addi    $a0, $r0, 0
jal     L1
move    $rv, $rv
sw      $rv, 0(t577)
j       L265

 -> Successors:
   L265:
move    $a0, $fp
lw      t587, 0($fp)
lw      t586, 0(t587)
move    $a1, t586
jal     L236
move    $rv, $rv
addi    t589, $r0, 0
sub     t588, t589, $rv
bnez    t588, L266
j       L260

 -> Predecessors:
   L265:
move    $a0, $fp
lw      t587, 0($fp)
lw      t586, 0(t587)
move    $a1, t586
jal     L236
move    $rv, $rv
addi    t589, $r0, 0
sub     t588, t589, $rv
bnez    t588, L266
j       L260

Node: L374:

 -> Successors:
 -> Predecessors:
   L260:
j       L374

Node: L375:
addi    t406, $r0, 0
move    $a0, $fp
jal     L237
move    $rv, $rv
addi    t579, $r0, 0
sub     t578, t579, t405
beqz    t578, L258
j       L259

 -> Successors:
   L258:
addi    $rv, $r0, 10
syscall
j       L259

   L259:
addi    t582, $r0, 0
addi    t583, $r0, 4
mul     t581, t582, t583
add     t580, t405, t581
move    t574, t580
move    $a0, $fp
lw      t585, 0($fp)
lw      t584, 0(t585)
move    $a1, t584
jal     L236
move    $rv, $rv
sw      $rv, 0(t574)

 -> Predecessors:
Frame L258
Defs: $rv, 
Uses: $r0, 
Frame L259
Defs: $rv, $ra, $a0, $a1, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t574, t580, t581, t582, t583, t584, t585, 
Uses: $r0, $fp, t405, 
Frame L260
Defs: 
Uses: 
Frame L265
Defs: $rv, $ra, $a0, $a1, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t586, t587, t588, t589, 
Uses: $r0, $fp, 
Frame L266
Defs: $rv, $ra, $a0, $a1, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t406, t575, t576, t577, t590, t591, t592, t593, t594, t595, t596, t597, t598, 
Uses: $r0, $fp, t406, 
Frame L374
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L375
Defs: $rv, $ra, $a0, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t406, t578, t579, 
Uses: $r0, $fp, t405, 
==================Printing Interference Graph==================
$rv => 
$ra => 
$a0 => 
$a1 => 
$s0 => 
$s1 => 
$s2 => 
$s3 => 
$s4 => 
$s5 => 
$s6 => 
$s7 => 
t406 => 
t574 => 
t575 => 
t576 => 
t577 => 
t578 => 
t579 => 
t580 => 
t581 => 
t582 => 
t583 => 
t584 => 
t585 => 
t586 => 
t587 => 
t588 => 
t589 => 
t590 => 
t591 => 
t592 => 
t593 => 
t594 => 
t595 => 
t596 => 
t597 => 
t598 => 
L264: 0
L263: 0
L262: 0
L261: 0
emit L237
L256:
lw      t603, 0($fp)
lw      t602, 0(t603)
lw      t601, 0(t602)
move    $a0, t601
la      t604, L246
move    $a1, t604
addi    $a2, $r0, 0
jal     mystrcmp
move    t599, $rv
addi    t606, $r0, 0
sub     t605, t606, t599
bnez    t605, L248
j       L249
L249:
lw      t609, 0($fp)
lw      t608, 0(t609)
lw      t607, 0(t608)
move    $a0, t607
la      t610, L247
move    $a1, t610
addi    $a2, $r0, 0
jal     mystrcmp
move    t410, $rv
L250:
addi    t612, $r0, 0
sub     t611, t612, t410
bnez    t611, L257
j       L245
L245:
j       L376
L248:
addi    t410, $r0, 1
j       L250
L257:
lw      t615, 0($fp)
lw      t614, 0(t615)
addi    t613, t614, 0
move    t600, t613
addi    $a0, $r0, 0
jal     L1
move    $rv, $rv
sw      $rv, 0(t600)
j       L256
L376:
doing label L245
doing label L248
doing label L249
../tests/merge.tig0.0:Internal failure: Last instr not jump.
doing label L250
doing label L256
doing label L257
doing label L376
Printing Flow Graph
Node: L245:
j       L376

 -> Successors:
 -> Predecessors:
   L250:
addi    t612, $r0, 0
sub     t611, t612, t410
bnez    t611, L257
j       L245

Node: L248:
addi    t410, $r0, 1
j       L250

 -> Successors:
 -> Predecessors:
   L256:
lw      t603, 0($fp)
lw      t602, 0(t603)
lw      t601, 0(t602)
move    $a0, t601
la      t604, L246
move    $a1, t604
addi    $a2, $r0, 0
jal     mystrcmp
move    t599, $rv
addi    t606, $r0, 0
sub     t605, t606, t599
bnez    t605, L248
j       L249

Node: L249:
lw      t609, 0($fp)
lw      t608, 0(t609)
lw      t607, 0(t608)
move    $a0, t607
la      t610, L247
move    $a1, t610
addi    $a2, $r0, 0
jal     mystrcmp
move    t410, $rv

 -> Successors:
 -> Predecessors:
   L256:
lw      t603, 0($fp)
lw      t602, 0(t603)
lw      t601, 0(t602)
move    $a0, t601
la      t604, L246
move    $a1, t604
addi    $a2, $r0, 0
jal     mystrcmp
move    t599, $rv
addi    t606, $r0, 0
sub     t605, t606, t599
bnez    t605, L248
j       L249

Node: L250:
addi    t612, $r0, 0
sub     t611, t612, t410
bnez    t611, L257
j       L245

 -> Successors:
   L245:
j       L376

   L257:
lw      t615, 0($fp)
lw      t614, 0(t615)
addi    t613, t614, 0
move    t600, t613
addi    $a0, $r0, 0
jal     L1
move    $rv, $rv
sw      $rv, 0(t600)
j       L256

 -> Predecessors:
Node: L256:
lw      t603, 0($fp)
lw      t602, 0(t603)
lw      t601, 0(t602)
move    $a0, t601
la      t604, L246
move    $a1, t604
addi    $a2, $r0, 0
jal     mystrcmp
move    t599, $rv
addi    t606, $r0, 0
sub     t605, t606, t599
bnez    t605, L248
j       L249

 -> Successors:
   L248:
addi    t410, $r0, 1
j       L250

   L249:
lw      t609, 0($fp)
lw      t608, 0(t609)
lw      t607, 0(t608)
move    $a0, t607
la      t610, L247
move    $a1, t610
addi    $a2, $r0, 0
jal     mystrcmp
move    t410, $rv

 -> Predecessors:
   L257:
lw      t615, 0($fp)
lw      t614, 0(t615)
addi    t613, t614, 0
move    t600, t613
addi    $a0, $r0, 0
jal     L1
move    $rv, $rv
sw      $rv, 0(t600)
j       L256

Node: L257:
lw      t615, 0($fp)
lw      t614, 0(t615)
addi    t613, t614, 0
move    t600, t613
addi    $a0, $r0, 0
jal     L1
move    $rv, $rv
sw      $rv, 0(t600)
j       L256

 -> Successors:
   L256:
lw      t603, 0($fp)
lw      t602, 0(t603)
lw      t601, 0(t602)
move    $a0, t601
la      t604, L246
move    $a1, t604
addi    $a2, $r0, 0
jal     mystrcmp
move    t599, $rv
addi    t606, $r0, 0
sub     t605, t606, t599
bnez    t605, L248
j       L249

 -> Predecessors:
   L250:
addi    t612, $r0, 0
sub     t611, t612, t410
bnez    t611, L257
j       L245

Node: L376:

 -> Successors:
 -> Predecessors:
Frame L245
Defs: 
Uses: 
Frame L248
Defs: t410, 
Uses: $r0, 
Frame L249
Defs: $rv, $ra, $a0, $a1, $a2, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t410, t607, t608, t609, t610, 
Uses: $r0, $fp, 
Frame L250
Defs: t611, t612, 
Uses: $r0, t410, 
Frame L256
Defs: $rv, $ra, $a0, $a1, $a2, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t599, t601, t602, t603, t604, t605, t606, 
Uses: $r0, $fp, 
Frame L257
Defs: $rv, $ra, $a0, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t600, t613, t614, t615, 
Uses: $r0, $fp, 
Frame L376
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
==================Printing Interference Graph==================
$rv => 
$ra => 
$a0 => 
$a1 => 
$a2 => 
$s0 => 
$s1 => 
$s2 => 
$s3 => 
$s4 => 
$s5 => 
$s6 => 
$s7 => 
t410 => 
t599 => 
t600 => 
t601 => 
t602 => 
t603 => 
t604 => 
t605 => 
t606 => 
t607 => 
t608 => 
t609 => 
t610 => 
t611 => 
t612 => 
t613 => 
t614 => 
t615 => 
L252: 

L251:  
L247: 

L246:  
emit L236
L378:
addi    t616, $r0, 0
j       L377
L377:
doing label L377
doing label L378
Printing Flow Graph
Node: L377:

 -> Successors:
 -> Predecessors:
   L378:
addi    t616, $r0, 0
j       L377

Node: L378:
addi    t616, $r0, 0
j       L377

 -> Successors:
   L377:

 -> Predecessors:
Frame L377
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L378
Defs: t616, 
Uses: $r0, 
==================Printing Interference Graph==================
t616 => 
L241: 9
L240: 9
L239: 0
L238: 0
val it = () : unit
====================Queens=====================
val it = () : unit
Parsing file: ../tests/queens.tig
LetExp([
 VarDec(N,false,NONE,
  IntExp(8)),
 TypeDec[
  (intArray,
   ArrayTy(int))],
 VarDec(row,false,NONE,
  ArrayExp(intArray,
   VarExp(
    SimpleVar(N)),
   IntExp(0))),
 VarDec(col,false,NONE,
  ArrayExp(intArray,
   VarExp(
    SimpleVar(N)),
   IntExp(0))),
 VarDec(diag1,false,NONE,
  ArrayExp(intArray,
   OpExp(MinusOp,
    OpExp(PlusOp,
     VarExp(
      SimpleVar(N)),
     VarExp(
      SimpleVar(N))),
    IntExp(1)),
   IntExp(0))),
 VarDec(diag2,false,NONE,
  ArrayExp(intArray,
   OpExp(MinusOp,
    OpExp(PlusOp,
     VarExp(
      SimpleVar(N)),
     VarExp(
      SimpleVar(N))),
    IntExp(1)),
   IntExp(0))),
 FunctionDec[
  (printboard,[],
NONE,
   SeqExp[
    ForExp(
i,false,
     IntExp(0),
     OpExp(MinusOp,
      VarExp(
       SimpleVar(N)),
      IntExp(1)),
     SeqExp[
      ForExp(
j,false,
       IntExp(0),
       OpExp(MinusOp,
        VarExp(
         SimpleVar(N)),
        IntExp(1)),
       CallExp(print,[
        IfExp(
         OpExp(EqOp,
          VarExp(
           SubscriptVar(
            SimpleVar(col),
            VarExp(
             SimpleVar(i)))),
          VarExp(
           SimpleVar(j))),
         StringExp(" O"),
         StringExp(" ."))])),
      CallExp(print,[
       StringExp("
")])]),
    CallExp(print,[
     StringExp("
")])]),
  (try,[
   (c,false,int)],
NONE,
   SeqExp[
    IfExp(
     OpExp(EqOp,
      VarExp(
       SimpleVar(c)),
      VarExp(
       SimpleVar(N))),
     CallExp(printboard,[]),
     ForExp(
r,false,
      IntExp(0),
      OpExp(MinusOp,
       VarExp(
        SimpleVar(N)),
       IntExp(1)),
      IfExp(
       IfExp(
        IfExp(
         OpExp(EqOp,
          VarExp(
           SubscriptVar(
            SimpleVar(row),
            VarExp(
             SimpleVar(r)))),
          IntExp(0)),
         OpExp(EqOp,
          VarExp(
           SubscriptVar(
            SimpleVar(diag1),
            OpExp(PlusOp,
             VarExp(
              SimpleVar(r)),
             VarExp(
              SimpleVar(c))))),
          IntExp(0)),
         IntExp(0)),
        OpExp(EqOp,
         VarExp(
          SubscriptVar(
           SimpleVar(diag2),
           OpExp(MinusOp,
            OpExp(PlusOp,
             VarExp(
              SimpleVar(r)),
             IntExp(7)),
            VarExp(
             SimpleVar(c))))),
         IntExp(0)),
        IntExp(0)),
       SeqExp[
        AssignExp(
         SubscriptVar(
          SimpleVar(row),
          VarExp(
           SimpleVar(r))),
         IntExp(1)),
        AssignExp(
         SubscriptVar(
          SimpleVar(diag1),
          OpExp(PlusOp,
           VarExp(
            SimpleVar(r)),
           VarExp(
            SimpleVar(c)))),
         IntExp(1)),
        AssignExp(
         SubscriptVar(
          SimpleVar(diag2),
          OpExp(MinusOp,
           OpExp(PlusOp,
            VarExp(
             SimpleVar(r)),
            IntExp(7)),
           VarExp(
            SimpleVar(c)))),
         IntExp(1)),
        AssignExp(
         SubscriptVar(
          SimpleVar(col),
          VarExp(
           SimpleVar(c))),
         VarExp(
          SimpleVar(r))),
        CallExp(try,[
         OpExp(PlusOp,
          VarExp(
           SimpleVar(c)),
          IntExp(1))]),
        AssignExp(
         SubscriptVar(
          SimpleVar(row),
          VarExp(
           SimpleVar(r))),
         IntExp(0)),
        AssignExp(
         SubscriptVar(
          SimpleVar(diag1),
          OpExp(PlusOp,
           VarExp(
            SimpleVar(r)),
           VarExp(
            SimpleVar(c)))),
         IntExp(0)),
        AssignExp(
         SubscriptVar(
          SimpleVar(diag2),
          OpExp(MinusOp,
           OpExp(PlusOp,
            VarExp(
             SimpleVar(r)),
            IntExp(7)),
           VarExp(
            SimpleVar(c)))),
         IntExp(0))])))])]],
 SeqExp[
  CallExp(try,[
   IntExp(0)])])
Semanting Analysis: 
Generating IR Tree: 
New body:
LABEL L555
MOVE(
 MEM(
  BINOP(PLUS,
   TEMP t108,
   CONST 0)),
 CONST 8)
MOVE(
 TEMP t678,
 BINOP(PLUS,
  TEMP t108,
  CONST ~4))
MOVE(
 TEMP t617,
 CALL(
  NAME initArray,
   BINOP(PLUS,
    MEM(
     BINOP(PLUS,
      TEMP t108,
      CONST 0)),
    CONST 1),
   CONST 0))
MOVE(
 MEM(
  TEMP t617),
 MEM(
  BINOP(PLUS,
   TEMP t108,
   CONST 0)))
MOVE(
 MEM(
  TEMP t678),
 TEMP t617)
MOVE(
 TEMP t679,
 BINOP(PLUS,
  TEMP t108,
  CONST ~8))
MOVE(
 TEMP t618,
 CALL(
  NAME initArray,
   BINOP(PLUS,
    MEM(
     BINOP(PLUS,
      TEMP t108,
      CONST 0)),
    CONST 1),
   CONST 0))
MOVE(
 MEM(
  TEMP t618),
 MEM(
  BINOP(PLUS,
   TEMP t108,
   CONST 0)))
MOVE(
 MEM(
  TEMP t679),
 TEMP t618)
MOVE(
 TEMP t680,
 BINOP(PLUS,
  TEMP t108,
  CONST ~12))
MOVE(
 TEMP t619,
 CALL(
  NAME initArray,
   BINOP(PLUS,
    BINOP(MINUS,
     BINOP(PLUS,
      MEM(
       BINOP(PLUS,
        TEMP t108,
        CONST 0)),
      MEM(
       BINOP(PLUS,
        TEMP t108,
        CONST 0))),
     CONST 1),
    CONST 1),
   CONST 0))
MOVE(
 MEM(
  TEMP t619),
 BINOP(MINUS,
  BINOP(PLUS,
   MEM(
    BINOP(PLUS,
     TEMP t108,
     CONST 0)),
   MEM(
    BINOP(PLUS,
     TEMP t108,
     CONST 0))),
  CONST 1))
MOVE(
 MEM(
  TEMP t680),
 TEMP t619)
MOVE(
 TEMP t681,
 BINOP(PLUS,
  TEMP t108,
  CONST ~16))
MOVE(
 TEMP t620,
 CALL(
  NAME initArray,
   BINOP(PLUS,
    BINOP(MINUS,
     BINOP(PLUS,
      MEM(
       BINOP(PLUS,
        TEMP t108,
        CONST 0)),
      MEM(
       BINOP(PLUS,
        TEMP t108,
        CONST 0))),
     CONST 1),
    CONST 1),
   CONST 0))
MOVE(
 MEM(
  TEMP t620),
 BINOP(MINUS,
  BINOP(PLUS,
   MEM(
    BINOP(PLUS,
     TEMP t108,
     CONST 0)),
   MEM(
    BINOP(PLUS,
     TEMP t108,
     CONST 0))),
  CONST 1))
MOVE(
 MEM(
  TEMP t681),
 TEMP t620)
MOVE(
 TEMP t102,
 CALL(
  NAME L381,
   TEMP t108,
   CONST 0))
EXP(
 TEMP t102)
JUMP(
 NAME L554)
LABEL L554
New body:
LABEL L557
EXP(
 CONST 0)
JUMP(
 NAME L556)
LABEL L556
New body:
LABEL L559
MOVE(
 TEMP t622,
 CONST 0)
CJUMP(LE,
 TEMP t622,
 BINOP(MINUS,
  MEM(
   BINOP(PLUS,
    MEM(
     BINOP(PLUS,
      CONST 0,
      TEMP t108)),
    CONST 0)),
  CONST 1),
 L410,L382)
LABEL L382
MOVE(
 TEMP t102,
 CALL(
  NAME L1,
   CONST 0,
   NAME L413))
EXP(
 TEMP t102)
JUMP(
 NAME L558)
LABEL L410
MOVE(
 TEMP t623,
 CONST 0)
CJUMP(LE,
 TEMP t623,
 BINOP(MINUS,
  MEM(
   BINOP(PLUS,
    MEM(
     BINOP(PLUS,
      CONST 0,
      TEMP t108)),
    CONST 0)),
  CONST 1),
 L406,L383)
LABEL L383
MOVE(
 TEMP t102,
 CALL(
  NAME L1,
   CONST 0,
   NAME L409))
EXP(
 TEMP t102)
CJUMP(GT,
 TEMP t622,
 BINOP(MINUS,
  MEM(
   BINOP(PLUS,
    MEM(
     BINOP(PLUS,
      CONST 0,
      TEMP t108)),
    CONST 0)),
  CONST 1),
 L382,L411)
LABEL L411
MOVE(
 TEMP t622,
 BINOP(PLUS,
  TEMP t622,
  CONST 1))
JUMP(
 NAME L410)
LABEL L406
MOVE(
 TEMP t627,
 CONST 1)
CJUMP(LT,
 TEMP t622,
 CONST 0,
 L397,L398)
LABEL L398
MOVE(
 TEMP t627,
 CONST 0)
LABEL L397
MOVE(
 TEMP t682,
 TEMP t627)
MOVE(
 TEMP t628,
 CONST 1)
CJUMP(GE,
 TEMP t622,
 MEM(
  MEM(
   BINOP(PLUS,
    MEM(
     BINOP(PLUS,
      CONST 0,
      TEMP t108)),
    CONST ~8))),
 L399,L400)
LABEL L400
MOVE(
 TEMP t628,
 CONST 0)
LABEL L399
CJUMP(NE,
 CONST 0,
 BINOP(OR,
  TEMP t682,
  TEMP t628),
 L395,L396)
LABEL L396
CJUMP(EQ,
 MEM(
  BINOP(PLUS,
   MEM(
    BINOP(PLUS,
     MEM(
      BINOP(PLUS,
       CONST 0,
       TEMP t108)),
     CONST ~8)),
   BINOP(MUL,
    BINOP(PLUS,
     TEMP t622,
     CONST 1),
    CONST 4))),
 TEMP t623,
 L403,L404)
LABEL L404
MOVE(
 TEMP t629,
 NAME L402)
LABEL L405
MOVE(
 TEMP t102,
 CALL(
  NAME L1,
   CONST 0,
   TEMP t629))
EXP(
 TEMP t102)
CJUMP(GT,
 TEMP t623,
 BINOP(MINUS,
  MEM(
   BINOP(PLUS,
    MEM(
     BINOP(PLUS,
      CONST 0,
      TEMP t108)),
    CONST 0)),
  CONST 1),
 L383,L407)
LABEL L407
MOVE(
 TEMP t623,
 BINOP(PLUS,
  TEMP t623,
  CONST 1))
JUMP(
 NAME L406)
LABEL L395
Runtime Error: array out of bounds check

JUMP(
 NAME L396)
LABEL L403
MOVE(
 TEMP t629,
 NAME L401)
JUMP(
 NAME L405)
LABEL L558
String:
L413: 

String:
L412: 

String:
L409: 

String:
L408: 

String:
L402:  .
String:
L401:  O
String:
L391:  .
String:
L390:  O
Going to step 2 :)
emit L0
L561:
addi    t687, $r0, 8
sw      t687, 0($fp)
addi    t688, $fp, -4
move    t683, t688
lw      t690, 0($fp)
addi    t689, t690, 1
move    $a0, t689
addi    $a1, $r0, 0
jal     initArray
move    t617, $rv
addi    t691, $fp, 0
sw      t691, 0(t617)
sw      t617, 0(t683)
addi    t692, $fp, -8
move    t684, t692
lw      t694, 0($fp)
addi    t693, t694, 1
move    $a0, t693
addi    $a1, $r0, 0
jal     initArray
move    t618, $rv
addi    t695, $fp, 0
sw      t695, 0(t618)
sw      t618, 0(t684)
addi    t696, $fp, -12
move    t685, t696
lw      t700, 0($fp)
lw      t701, 0($fp)
add     t699, t700, t701
addi    t698, t699, -1
addi    t697, t698, 1
move    $a0, t697
addi    $a1, $r0, 0
jal     initArray
move    t619, $rv
lw      t704, 0($fp)
lw      t705, 0($fp)
add     t703, t704, t705
addi    t702, t703, -1
sw      t702, 0(t619)
sw      t619, 0(t685)
addi    t706, $fp, -16
move    t686, t706
lw      t710, 0($fp)
lw      t711, 0($fp)
add     t709, t710, t711
addi    t708, t709, -1
addi    t707, t708, 1
move    $a0, t707
addi    $a1, $r0, 0
jal     initArray
move    t620, $rv
lw      t714, 0($fp)
lw      t715, 0($fp)
add     t713, t714, t715
addi    t712, t713, -1
sw      t712, 0(t620)
sw      t620, 0(t686)
move    $a0, $fp
addi    $a1, $r0, 0
jal     L381
move    $rv, $rv
j       L560
L560:
doing label L560
doing label L561
Printing Flow Graph
Node: L560:

 -> Successors:
 -> Predecessors:
   L561:
addi    t687, $r0, 8
sw      t687, 0($fp)
addi    t688, $fp, -4
move    t683, t688
lw      t690, 0($fp)
addi    t689, t690, 1
move    $a0, t689
addi    $a1, $r0, 0
jal     initArray
move    t617, $rv
addi    t691, $fp, 0
sw      t691, 0(t617)
sw      t617, 0(t683)
addi    t692, $fp, -8
move    t684, t692
lw      t694, 0($fp)
addi    t693, t694, 1
move    $a0, t693
addi    $a1, $r0, 0
jal     initArray
move    t618, $rv
addi    t695, $fp, 0
sw      t695, 0(t618)
sw      t618, 0(t684)
addi    t696, $fp, -12
move    t685, t696
lw      t700, 0($fp)
lw      t701, 0($fp)
add     t699, t700, t701
addi    t698, t699, -1
addi    t697, t698, 1
move    $a0, t697
addi    $a1, $r0, 0
jal     initArray
move    t619, $rv
lw      t704, 0($fp)
lw      t705, 0($fp)
add     t703, t704, t705
addi    t702, t703, -1
sw      t702, 0(t619)
sw      t619, 0(t685)
addi    t706, $fp, -16
move    t686, t706
lw      t710, 0($fp)
lw      t711, 0($fp)
add     t709, t710, t711
addi    t708, t709, -1
addi    t707, t708, 1
move    $a0, t707
addi    $a1, $r0, 0
jal     initArray
move    t620, $rv
lw      t714, 0($fp)
lw      t715, 0($fp)
add     t713, t714, t715
addi    t712, t713, -1
sw      t712, 0(t620)
sw      t620, 0(t686)
move    $a0, $fp
addi    $a1, $r0, 0
jal     L381
move    $rv, $rv
j       L560

Node: L561:
addi    t687, $r0, 8
sw      t687, 0($fp)
addi    t688, $fp, -4
move    t683, t688
lw      t690, 0($fp)
addi    t689, t690, 1
move    $a0, t689
addi    $a1, $r0, 0
jal     initArray
move    t617, $rv
addi    t691, $fp, 0
sw      t691, 0(t617)
sw      t617, 0(t683)
addi    t692, $fp, -8
move    t684, t692
lw      t694, 0($fp)
addi    t693, t694, 1
move    $a0, t693
addi    $a1, $r0, 0
jal     initArray
move    t618, $rv
addi    t695, $fp, 0
sw      t695, 0(t618)
sw      t618, 0(t684)
addi    t696, $fp, -12
move    t685, t696
lw      t700, 0($fp)
lw      t701, 0($fp)
add     t699, t700, t701
addi    t698, t699, -1
addi    t697, t698, 1
move    $a0, t697
addi    $a1, $r0, 0
jal     initArray
move    t619, $rv
lw      t704, 0($fp)
lw      t705, 0($fp)
add     t703, t704, t705
addi    t702, t703, -1
sw      t702, 0(t619)
sw      t619, 0(t685)
addi    t706, $fp, -16
move    t686, t706
lw      t710, 0($fp)
lw      t711, 0($fp)
add     t709, t710, t711
addi    t708, t709, -1
addi    t707, t708, 1
move    $a0, t707
addi    $a1, $r0, 0
jal     initArray
move    t620, $rv
lw      t714, 0($fp)
lw      t715, 0($fp)
add     t713, t714, t715
addi    t712, t713, -1
sw      t712, 0(t620)
sw      t620, 0(t686)
move    $a0, $fp
addi    $a1, $r0, 0
jal     L381
move    $rv, $rv
j       L560

 -> Successors:
   L560:

 -> Predecessors:
Frame L560
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L561
Defs: $rv, $ra, $a0, $a1, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t617, t618, t619, t620, t683, t684, t685, t686, t687, t688, t689, t690, t691, t692, t693, t694, t695, t696, t697, t698, t699, t700, t701, t702, t703, t704, t705, t706, t707, t708, t709, t710, t711, t712, t713, t714, t715, 
Uses: $r0, $fp, 
==================Printing Interference Graph==================
$rv => 
$ra => 
$a0 => 
$a1 => 
$s0 => 
$s1 => 
$s2 => 
$s3 => 
$s4 => 
$s5 => 
$s6 => 
$s7 => 
t617 => 
t618 => 
t619 => 
t620 => 
t683 => 
t684 => 
t685 => 
t686 => 
t687 => 
t688 => 
t689 => 
t690 => 
t691 => 
t692 => 
t693 => 
t694 => 
t695 => 
t696 => 
t697 => 
t698 => 
t699 => 
t700 => 
t701 => 
t702 => 
t703 => 
t704 => 
t705 => 
t706 => 
t707 => 
t708 => 
t709 => 
t710 => 
t711 => 
t712 => 
t713 => 
t714 => 
t715 => 
emit L381
L563:
addi    t716, $r0, 0
j       L562
L562:
doing label L562
doing label L563
Printing Flow Graph
Node: L562:

 -> Successors:
 -> Predecessors:
   L563:
addi    t716, $r0, 0
j       L562

Node: L563:
addi    t716, $r0, 0
j       L562

 -> Successors:
   L562:

 -> Predecessors:
Frame L562
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L563
Defs: t716, 
Uses: $r0, 
==================Printing Interference Graph==================
t716 => 
emit L380
L565:
addi    t622, $r0, 0
lw      t721, 0($fp)
lw      t720, 0(t721)
addi    t719, t720, -1
sub     t718, t622, t719
blez    t718, L410
j       L382
L382:
addi    $a0, $r0, 0
la      t722, L413
move    $a1, t722
jal     L1
move    $rv, $rv
j       L564
L410:
addi    t623, $r0, 0
lw      t726, 0($fp)
lw      t725, 0(t726)
addi    t724, t725, -1
sub     t723, t623, t724
blez    t723, L406
j       L383
L383:
addi    $a0, $r0, 0
la      t727, L409
move    $a1, t727
jal     L1
move    $rv, $rv
lw      t731, 0($fp)
lw      t730, 0(t731)
addi    t729, t730, -1
sub     t728, t622, t729
bgtz    t728, L382
j       L411
L411:
addi    t732, t622, 1
move    t622, t732
j       L410
L406:
addi    t627, $r0, 1
addi    t733, t622, 0
bltz    t733, L397
j       L398
L398:
addi    t627, $r0, 0
L397:
move    t717, t627
addi    t628, $r0, 1
lw      t737, 0($fp)
lw      t736, -8(t737)
lw      t735, 0(t736)
sub     t734, t622, t735
bgez    t734, L399
j       L400
L400:
addi    t628, $r0, 0
L399:
addi    t739, $r0, 0
or      t740, t717, t628
sub     t738, t739, t740
bnez    t738, L395
j       L396
L396:
lw      t745, 0($fp)
lw      t744, -8(t745)
addi    t747, t622, 1
addi    t748, $r0, 4
mul     t746, t747, t748
add     t743, t744, t746
lw      t742, 0(t743)
sub     t741, t742, t623
beqz    t741, L403
j       L404
L404:
la      t749, L402
move    t629, t749
L405:
addi    $a0, $r0, 0
move    $a1, t629
jal     L1
move    $rv, $rv
lw      t753, 0($fp)
lw      t752, 0(t753)
addi    t751, t752, -1
sub     t750, t623, t751
bgtz    t750, L383
j       L407
L407:
addi    t754, t623, 1
move    t623, t754
j       L406
L395:
addi    $rv, $r0, 10
syscall
j       L396
L403:
la      t755, L401
move    t629, t755
j       L405
L564:
doing label L382
doing label L383
doing label L395
doing label L396
doing label L397
doing label L398
../tests/queens.tig0.0:Internal failure: Last instr not jump.
doing label L399
doing label L400
../tests/queens.tig0.0:Internal failure: Last instr not jump.
doing label L403
doing label L404
../tests/queens.tig0.0:Internal failure: Last instr not jump.
doing label L405
doing label L406
doing label L407
doing label L410
doing label L411
doing label L564
doing label L565
Printing Flow Graph
Node: L382:
addi    $a0, $r0, 0
la      t722, L413
move    $a1, t722
jal     L1
move    $rv, $rv
j       L564

 -> Successors:
 -> Predecessors:
   L565:
addi    t622, $r0, 0
lw      t721, 0($fp)
lw      t720, 0(t721)
addi    t719, t720, -1
sub     t718, t622, t719
blez    t718, L410
j       L382

Node: L383:
addi    $a0, $r0, 0
la      t727, L409
move    $a1, t727
jal     L1
move    $rv, $rv
lw      t731, 0($fp)
lw      t730, 0(t731)
addi    t729, t730, -1
sub     t728, t622, t729
bgtz    t728, L382
j       L411

 -> Successors:
 -> Predecessors:
   L405:
addi    $a0, $r0, 0
move    $a1, t629
jal     L1
move    $rv, $rv
lw      t753, 0($fp)
lw      t752, 0(t753)
addi    t751, t752, -1
sub     t750, t623, t751
bgtz    t750, L383
j       L407

   L410:
addi    t623, $r0, 0
lw      t726, 0($fp)
lw      t725, 0(t726)
addi    t724, t725, -1
sub     t723, t623, t724
blez    t723, L406
j       L383

Node: L395:
addi    $rv, $r0, 10
syscall
j       L396

 -> Successors:
 -> Predecessors:
Node: L396:
lw      t745, 0($fp)
lw      t744, -8(t745)
addi    t747, t622, 1
addi    t748, $r0, 4
mul     t746, t747, t748
add     t743, t744, t746
lw      t742, 0(t743)
sub     t741, t742, t623
beqz    t741, L403
j       L404

 -> Successors:
 -> Predecessors:
Node: L397:
move    t717, t627
addi    t628, $r0, 1
lw      t737, 0($fp)
lw      t736, -8(t737)
lw      t735, 0(t736)
sub     t734, t622, t735
bgez    t734, L399
j       L400

 -> Successors:
 -> Predecessors:
   L406:
addi    t627, $r0, 1
addi    t733, t622, 0
bltz    t733, L397
j       L398

Node: L398:
addi    t627, $r0, 0

 -> Successors:
 -> Predecessors:
   L406:
addi    t627, $r0, 1
addi    t733, t622, 0
bltz    t733, L397
j       L398

Node: L399:
addi    t739, $r0, 0
or      t740, t717, t628
sub     t738, t739, t740
bnez    t738, L395
j       L396

 -> Successors:
 -> Predecessors:
Node: L400:
addi    t628, $r0, 0

 -> Successors:
 -> Predecessors:
Node: L403:
la      t755, L401
move    t629, t755
j       L405

 -> Successors:
 -> Predecessors:
Node: L404:
la      t749, L402
move    t629, t749

 -> Successors:
 -> Predecessors:
Node: L405:
addi    $a0, $r0, 0
move    $a1, t629
jal     L1
move    $rv, $rv
lw      t753, 0($fp)
lw      t752, 0(t753)
addi    t751, t752, -1
sub     t750, t623, t751
bgtz    t750, L383
j       L407

 -> Successors:
   L383:
addi    $a0, $r0, 0
la      t727, L409
move    $a1, t727
jal     L1
move    $rv, $rv
lw      t731, 0($fp)
lw      t730, 0(t731)
addi    t729, t730, -1
sub     t728, t622, t729
bgtz    t728, L382
j       L411

   L407:
addi    t754, t623, 1
move    t623, t754
j       L406

 -> Predecessors:
Node: L406:
addi    t627, $r0, 1
addi    t733, t622, 0
bltz    t733, L397
j       L398

 -> Successors:
   L397:
move    t717, t627
addi    t628, $r0, 1
lw      t737, 0($fp)
lw      t736, -8(t737)
lw      t735, 0(t736)
sub     t734, t622, t735
bgez    t734, L399
j       L400

   L398:
addi    t627, $r0, 0

 -> Predecessors:
   L407:
addi    t754, t623, 1
move    t623, t754
j       L406

   L410:
addi    t623, $r0, 0
lw      t726, 0($fp)
lw      t725, 0(t726)
addi    t724, t725, -1
sub     t723, t623, t724
blez    t723, L406
j       L383

Node: L407:
addi    t754, t623, 1
move    t623, t754
j       L406

 -> Successors:
   L406:
addi    t627, $r0, 1
addi    t733, t622, 0
bltz    t733, L397
j       L398

 -> Predecessors:
   L405:
addi    $a0, $r0, 0
move    $a1, t629
jal     L1
move    $rv, $rv
lw      t753, 0($fp)
lw      t752, 0(t753)
addi    t751, t752, -1
sub     t750, t623, t751
bgtz    t750, L383
j       L407

Node: L410:
addi    t623, $r0, 0
lw      t726, 0($fp)
lw      t725, 0(t726)
addi    t724, t725, -1
sub     t723, t623, t724
blez    t723, L406
j       L383

 -> Successors:
   L383:
addi    $a0, $r0, 0
la      t727, L409
move    $a1, t727
jal     L1
move    $rv, $rv
lw      t731, 0($fp)
lw      t730, 0(t731)
addi    t729, t730, -1
sub     t728, t622, t729
bgtz    t728, L382
j       L411

   L406:
addi    t627, $r0, 1
addi    t733, t622, 0
bltz    t733, L397
j       L398

 -> Predecessors:
   L411:
addi    t732, t622, 1
move    t622, t732
j       L410

   L565:
addi    t622, $r0, 0
lw      t721, 0($fp)
lw      t720, 0(t721)
addi    t719, t720, -1
sub     t718, t622, t719
blez    t718, L410
j       L382

Node: L411:
addi    t732, t622, 1
move    t622, t732
j       L410

 -> Successors:
   L410:
addi    t623, $r0, 0
lw      t726, 0($fp)
lw      t725, 0(t726)
addi    t724, t725, -1
sub     t723, t623, t724
blez    t723, L406
j       L383

 -> Predecessors:
Node: L564:

 -> Successors:
 -> Predecessors:
Node: L565:
addi    t622, $r0, 0
lw      t721, 0($fp)
lw      t720, 0(t721)
addi    t719, t720, -1
sub     t718, t622, t719
blez    t718, L410
j       L382

 -> Successors:
   L382:
addi    $a0, $r0, 0
la      t722, L413
move    $a1, t722
jal     L1
move    $rv, $rv
j       L564

   L410:
addi    t623, $r0, 0
lw      t726, 0($fp)
lw      t725, 0(t726)
addi    t724, t725, -1
sub     t723, t623, t724
blez    t723, L406
j       L383

 -> Predecessors:
Frame L382
Defs: $rv, $ra, $a0, $a1, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t722, 
Uses: $r0, 
Frame L383
Defs: $rv, $ra, $a0, $a1, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t727, t728, t729, t730, t731, 
Uses: $r0, $fp, t622, 
Frame L395
Defs: $rv, 
Uses: $r0, 
Frame L396
Defs: t741, t742, t743, t744, t745, t746, t747, t748, 
Uses: $r0, $fp, t622, t623, 
Frame L397
Defs: t628, t717, t734, t735, t736, t737, 
Uses: $r0, $fp, t622, t627, 
Frame L398
Defs: t627, 
Uses: $r0, 
Frame L399
Defs: t738, t739, t740, 
Uses: $r0, t628, t717, 
Frame L400
Defs: t628, 
Uses: $r0, 
Frame L403
Defs: t629, t755, 
Uses: 
Frame L404
Defs: t629, t749, 
Uses: 
Frame L405
Defs: $rv, $ra, $a0, $a1, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, t750, t751, t752, t753, 
Uses: $r0, $fp, t623, t629, 
Frame L406
Defs: t627, t733, 
Uses: $r0, t622, 
Frame L407
Defs: t623, t754, 
Uses: t623, 
Frame L410
Defs: t623, t723, t724, t725, t726, 
Uses: $r0, $fp, 
Frame L411
Defs: t622, t732, 
Uses: t622, 
Frame L564
Defs: 
Uses: $r0, $at, $rv, $v1, $k0, $k1, $gp, $sp, $fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, 
Frame L565
Defs: t622, t718, t719, t720, t721, 
Uses: $r0, $fp, 
==================Printing Interference Graph==================
$rv => 
$ra => 
$a0 => 
$a1 => 
$s0 => 
$s1 => 
$s2 => 
$s3 => 
$s4 => 
$s5 => 
$s6 => 
$s7 => 
t622 => 
t623 => 
t627 => 
t628 => 
t629 => 
t717 => 
t718 => 
t719 => 
t720 => 
t721 => 
t722 => 
t723 => 
t724 => 
t725 => 
t726 => 
t727 => 
t728 => 
t729 => 
t730 => 
t731 => 
t732 => 
t733 => 
t734 => 
t735 => 
t736 => 
t737 => 
t738 => 
t739 => 
t740 => 
t741 => 
t742 => 
t743 => 
t744 => 
t745 => 
t746 => 
t747 => 
t748 => 
t749 => 
t750 => 
t751 => 
t752 => 
t753 => 
t754 => 
t755 => 
L413: 

L412: 

L409: 

L408: 

L402:  .
L401:  O
L391:  .
L390:  O
val it = () : unit
- 
