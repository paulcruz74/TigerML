%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  exp | program 
        | math | comp | bool | decs | dec | tydec | ty | tyfields | vardec | fundec | lvalue

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

(* This is a skeleton grammar file, meant to illustrate what kind of
 * declarations are necessary above the %% mark.  Students are expected
 *  to replace the two dummy productions below with an actual grammar. 
 *)

program	: exp				()

	
exp
: math ()
| comp ()
| bool ()


math
: exp PLUS exp ()
| exp MINUS exp ()
| exp TIMES exp ()
| exp DIVIDE exp ()

comp
: exp LT exp ()
| exp LE exp ()
| exp GT exp ()
| exp GE exp ()

bool
: exp AND exp ()
| exp OR exp ()

decs 
: LBRACE dec RBRACE ()

dec
: tydec ()
| vardec ()
| fundec ()

tydec
: TYPE ID EQ ty ()

ty
: ID ()
| LBRACE tyfields RBRACE ()
| ARRAY OF ID ()

tyfields
: ()
| ID COLON ID tyfields ()

vardec
: VAR ID ASSIGN exp ()
| VAR ID COLON ID ASSIGN exp ()

fundec
: FUNCTION ID LPAREN tyfields RPAREN EQ exp ()
| FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp ()

lvalue
: ID ()
| lvalue DOT ID ()
| lvalue LBRACK exp RBRACK ()


